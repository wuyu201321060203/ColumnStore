// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MSG_DS_CS_RTABLE_SEND.proto

#ifndef PROTOBUF_MSG_5fDS_5fCS_5fRTABLE_5fSEND_2eproto__INCLUDED
#define PROTOBUF_MSG_5fDS_5fCS_5fRTABLE_5fSEND_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MSG_5fDS_5fCS_5fRTABLE_5fSEND_2eproto();
void protobuf_AssignDesc_MSG_5fDS_5fCS_5fRTABLE_5fSEND_2eproto();
void protobuf_ShutdownFile_MSG_5fDS_5fCS_5fRTABLE_5fSEND_2eproto();

class MSG_DS_CS_RTABLE_SEND;
class MSG_CS_DS_RTABLE_SEND_ACK;

// ===================================================================

class MSG_DS_CS_RTABLE_SEND : public ::google::protobuf::Message {
 public:
  MSG_DS_CS_RTABLE_SEND();
  virtual ~MSG_DS_CS_RTABLE_SEND();
  
  MSG_DS_CS_RTABLE_SEND(const MSG_DS_CS_RTABLE_SEND& from);
  
  inline MSG_DS_CS_RTABLE_SEND& operator=(const MSG_DS_CS_RTABLE_SEND& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_DS_CS_RTABLE_SEND& default_instance();
  
  void Swap(MSG_DS_CS_RTABLE_SEND* other);
  
  // implements Message ----------------------------------------------
  
  MSG_DS_CS_RTABLE_SEND* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_DS_CS_RTABLE_SEND& from);
  void MergeFrom(const MSG_DS_CS_RTABLE_SEND& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 taskID = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);
  
  // required uint32 dbID = 2;
  inline bool has_dbid() const;
  inline void clear_dbid();
  static const int kDbIDFieldNumber = 2;
  inline ::google::protobuf::uint32 dbid() const;
  inline void set_dbid(::google::protobuf::uint32 value);
  
  // required string tableName = 3;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTableNameFieldNumber = 3;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const char* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  
  // required string columnName = 4;
  inline bool has_columnname() const;
  inline void clear_columnname();
  static const int kColumnNameFieldNumber = 4;
  inline const ::std::string& columnname() const;
  inline void set_columnname(const ::std::string& value);
  inline void set_columnname(const char* value);
  inline void set_columnname(const char* value, size_t size);
  inline ::std::string* mutable_columnname();
  inline ::std::string* release_columnname();
  
  // repeated .ROWKEY_ENTRY rowTable = 5;
  inline int rowtable_size() const;
  inline void clear_rowtable();
  static const int kRowTableFieldNumber = 5;
  inline const ::ROWKEY_ENTRY& rowtable(int index) const;
  inline ::ROWKEY_ENTRY* mutable_rowtable(int index);
  inline ::ROWKEY_ENTRY* add_rowtable();
  inline const ::google::protobuf::RepeatedPtrField< ::ROWKEY_ENTRY >&
      rowtable() const;
  inline ::google::protobuf::RepeatedPtrField< ::ROWKEY_ENTRY >*
      mutable_rowtable();
  
  // repeated uint32 xVector = 6;
  inline int xvector_size() const;
  inline void clear_xvector();
  static const int kXVectorFieldNumber = 6;
  inline ::google::protobuf::uint32 xvector(int index) const;
  inline void set_xvector(int index, ::google::protobuf::uint32 value);
  inline void add_xvector(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      xvector() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_xvector();
  
  // @@protoc_insertion_point(class_scope:MSG_DS_CS_RTABLE_SEND)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_dbid();
  inline void clear_has_dbid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_columnname();
  inline void clear_has_columnname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 taskid_;
  ::google::protobuf::uint32 dbid_;
  ::std::string* tablename_;
  ::std::string* columnname_;
  ::google::protobuf::RepeatedPtrField< ::ROWKEY_ENTRY > rowtable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > xvector_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_MSG_5fDS_5fCS_5fRTABLE_5fSEND_2eproto();
  friend void protobuf_AssignDesc_MSG_5fDS_5fCS_5fRTABLE_5fSEND_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fDS_5fCS_5fRTABLE_5fSEND_2eproto();
  
  void InitAsDefaultInstance();
  static MSG_DS_CS_RTABLE_SEND* default_instance_;
};
// -------------------------------------------------------------------

class MSG_CS_DS_RTABLE_SEND_ACK : public ::google::protobuf::Message {
 public:
  MSG_CS_DS_RTABLE_SEND_ACK();
  virtual ~MSG_CS_DS_RTABLE_SEND_ACK();
  
  MSG_CS_DS_RTABLE_SEND_ACK(const MSG_CS_DS_RTABLE_SEND_ACK& from);
  
  inline MSG_CS_DS_RTABLE_SEND_ACK& operator=(const MSG_CS_DS_RTABLE_SEND_ACK& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_CS_DS_RTABLE_SEND_ACK& default_instance();
  
  void Swap(MSG_CS_DS_RTABLE_SEND_ACK* other);
  
  // implements Message ----------------------------------------------
  
  MSG_CS_DS_RTABLE_SEND_ACK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_CS_DS_RTABLE_SEND_ACK& from);
  void MergeFrom(const MSG_CS_DS_RTABLE_SEND_ACK& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 taskID = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);
  
  // required uint32 statusCode = 2;
  inline bool has_statuscode() const;
  inline void clear_statuscode();
  static const int kStatusCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 statuscode() const;
  inline void set_statuscode(::google::protobuf::uint32 value);
  
  // required string columnName = 3;
  inline bool has_columnname() const;
  inline void clear_columnname();
  static const int kColumnNameFieldNumber = 3;
  inline const ::std::string& columnname() const;
  inline void set_columnname(const ::std::string& value);
  inline void set_columnname(const char* value);
  inline void set_columnname(const char* value, size_t size);
  inline ::std::string* mutable_columnname();
  inline ::std::string* release_columnname();
  
  // @@protoc_insertion_point(class_scope:MSG_CS_DS_RTABLE_SEND_ACK)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_statuscode();
  inline void clear_has_statuscode();
  inline void set_has_columnname();
  inline void clear_has_columnname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 taskid_;
  ::google::protobuf::uint32 statuscode_;
  ::std::string* columnname_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MSG_5fDS_5fCS_5fRTABLE_5fSEND_2eproto();
  friend void protobuf_AssignDesc_MSG_5fDS_5fCS_5fRTABLE_5fSEND_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fDS_5fCS_5fRTABLE_5fSEND_2eproto();
  
  void InitAsDefaultInstance();
  static MSG_CS_DS_RTABLE_SEND_ACK* default_instance_;
};
// ===================================================================


// ===================================================================

// MSG_DS_CS_RTABLE_SEND

// required uint32 taskID = 1;
inline bool MSG_DS_CS_RTABLE_SEND::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_DS_CS_RTABLE_SEND::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSG_DS_CS_RTABLE_SEND::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSG_DS_CS_RTABLE_SEND::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 MSG_DS_CS_RTABLE_SEND::taskid() const {
  return taskid_;
}
inline void MSG_DS_CS_RTABLE_SEND::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// required uint32 dbID = 2;
inline bool MSG_DS_CS_RTABLE_SEND::has_dbid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MSG_DS_CS_RTABLE_SEND::set_has_dbid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MSG_DS_CS_RTABLE_SEND::clear_has_dbid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MSG_DS_CS_RTABLE_SEND::clear_dbid() {
  dbid_ = 0u;
  clear_has_dbid();
}
inline ::google::protobuf::uint32 MSG_DS_CS_RTABLE_SEND::dbid() const {
  return dbid_;
}
inline void MSG_DS_CS_RTABLE_SEND::set_dbid(::google::protobuf::uint32 value) {
  set_has_dbid();
  dbid_ = value;
}

// required string tableName = 3;
inline bool MSG_DS_CS_RTABLE_SEND::has_tablename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MSG_DS_CS_RTABLE_SEND::set_has_tablename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MSG_DS_CS_RTABLE_SEND::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MSG_DS_CS_RTABLE_SEND::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& MSG_DS_CS_RTABLE_SEND::tablename() const {
  return *tablename_;
}
inline void MSG_DS_CS_RTABLE_SEND::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void MSG_DS_CS_RTABLE_SEND::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void MSG_DS_CS_RTABLE_SEND::set_tablename(const char* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSG_DS_CS_RTABLE_SEND::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  return tablename_;
}
inline ::std::string* MSG_DS_CS_RTABLE_SEND::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string columnName = 4;
inline bool MSG_DS_CS_RTABLE_SEND::has_columnname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MSG_DS_CS_RTABLE_SEND::set_has_columnname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MSG_DS_CS_RTABLE_SEND::clear_has_columnname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MSG_DS_CS_RTABLE_SEND::clear_columnname() {
  if (columnname_ != &::google::protobuf::internal::kEmptyString) {
    columnname_->clear();
  }
  clear_has_columnname();
}
inline const ::std::string& MSG_DS_CS_RTABLE_SEND::columnname() const {
  return *columnname_;
}
inline void MSG_DS_CS_RTABLE_SEND::set_columnname(const ::std::string& value) {
  set_has_columnname();
  if (columnname_ == &::google::protobuf::internal::kEmptyString) {
    columnname_ = new ::std::string;
  }
  columnname_->assign(value);
}
inline void MSG_DS_CS_RTABLE_SEND::set_columnname(const char* value) {
  set_has_columnname();
  if (columnname_ == &::google::protobuf::internal::kEmptyString) {
    columnname_ = new ::std::string;
  }
  columnname_->assign(value);
}
inline void MSG_DS_CS_RTABLE_SEND::set_columnname(const char* value, size_t size) {
  set_has_columnname();
  if (columnname_ == &::google::protobuf::internal::kEmptyString) {
    columnname_ = new ::std::string;
  }
  columnname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSG_DS_CS_RTABLE_SEND::mutable_columnname() {
  set_has_columnname();
  if (columnname_ == &::google::protobuf::internal::kEmptyString) {
    columnname_ = new ::std::string;
  }
  return columnname_;
}
inline ::std::string* MSG_DS_CS_RTABLE_SEND::release_columnname() {
  clear_has_columnname();
  if (columnname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = columnname_;
    columnname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .ROWKEY_ENTRY rowTable = 5;
inline int MSG_DS_CS_RTABLE_SEND::rowtable_size() const {
  return rowtable_.size();
}
inline void MSG_DS_CS_RTABLE_SEND::clear_rowtable() {
  rowtable_.Clear();
}
inline const ::ROWKEY_ENTRY& MSG_DS_CS_RTABLE_SEND::rowtable(int index) const {
  return rowtable_.Get(index);
}
inline ::ROWKEY_ENTRY* MSG_DS_CS_RTABLE_SEND::mutable_rowtable(int index) {
  return rowtable_.Mutable(index);
}
inline ::ROWKEY_ENTRY* MSG_DS_CS_RTABLE_SEND::add_rowtable() {
  return rowtable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ROWKEY_ENTRY >&
MSG_DS_CS_RTABLE_SEND::rowtable() const {
  return rowtable_;
}
inline ::google::protobuf::RepeatedPtrField< ::ROWKEY_ENTRY >*
MSG_DS_CS_RTABLE_SEND::mutable_rowtable() {
  return &rowtable_;
}

// repeated uint32 xVector = 6;
inline int MSG_DS_CS_RTABLE_SEND::xvector_size() const {
  return xvector_.size();
}
inline void MSG_DS_CS_RTABLE_SEND::clear_xvector() {
  xvector_.Clear();
}
inline ::google::protobuf::uint32 MSG_DS_CS_RTABLE_SEND::xvector(int index) const {
  return xvector_.Get(index);
}
inline void MSG_DS_CS_RTABLE_SEND::set_xvector(int index, ::google::protobuf::uint32 value) {
  xvector_.Set(index, value);
}
inline void MSG_DS_CS_RTABLE_SEND::add_xvector(::google::protobuf::uint32 value) {
  xvector_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MSG_DS_CS_RTABLE_SEND::xvector() const {
  return xvector_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MSG_DS_CS_RTABLE_SEND::mutable_xvector() {
  return &xvector_;
}

// -------------------------------------------------------------------

// MSG_CS_DS_RTABLE_SEND_ACK

// required uint32 taskID = 1;
inline bool MSG_CS_DS_RTABLE_SEND_ACK::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_CS_DS_RTABLE_SEND_ACK::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSG_CS_DS_RTABLE_SEND_ACK::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSG_CS_DS_RTABLE_SEND_ACK::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 MSG_CS_DS_RTABLE_SEND_ACK::taskid() const {
  return taskid_;
}
inline void MSG_CS_DS_RTABLE_SEND_ACK::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// required uint32 statusCode = 2;
inline bool MSG_CS_DS_RTABLE_SEND_ACK::has_statuscode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MSG_CS_DS_RTABLE_SEND_ACK::set_has_statuscode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MSG_CS_DS_RTABLE_SEND_ACK::clear_has_statuscode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MSG_CS_DS_RTABLE_SEND_ACK::clear_statuscode() {
  statuscode_ = 0u;
  clear_has_statuscode();
}
inline ::google::protobuf::uint32 MSG_CS_DS_RTABLE_SEND_ACK::statuscode() const {
  return statuscode_;
}
inline void MSG_CS_DS_RTABLE_SEND_ACK::set_statuscode(::google::protobuf::uint32 value) {
  set_has_statuscode();
  statuscode_ = value;
}

// required string columnName = 3;
inline bool MSG_CS_DS_RTABLE_SEND_ACK::has_columnname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MSG_CS_DS_RTABLE_SEND_ACK::set_has_columnname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MSG_CS_DS_RTABLE_SEND_ACK::clear_has_columnname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MSG_CS_DS_RTABLE_SEND_ACK::clear_columnname() {
  if (columnname_ != &::google::protobuf::internal::kEmptyString) {
    columnname_->clear();
  }
  clear_has_columnname();
}
inline const ::std::string& MSG_CS_DS_RTABLE_SEND_ACK::columnname() const {
  return *columnname_;
}
inline void MSG_CS_DS_RTABLE_SEND_ACK::set_columnname(const ::std::string& value) {
  set_has_columnname();
  if (columnname_ == &::google::protobuf::internal::kEmptyString) {
    columnname_ = new ::std::string;
  }
  columnname_->assign(value);
}
inline void MSG_CS_DS_RTABLE_SEND_ACK::set_columnname(const char* value) {
  set_has_columnname();
  if (columnname_ == &::google::protobuf::internal::kEmptyString) {
    columnname_ = new ::std::string;
  }
  columnname_->assign(value);
}
inline void MSG_CS_DS_RTABLE_SEND_ACK::set_columnname(const char* value, size_t size) {
  set_has_columnname();
  if (columnname_ == &::google::protobuf::internal::kEmptyString) {
    columnname_ = new ::std::string;
  }
  columnname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSG_CS_DS_RTABLE_SEND_ACK::mutable_columnname() {
  set_has_columnname();
  if (columnname_ == &::google::protobuf::internal::kEmptyString) {
    columnname_ = new ::std::string;
  }
  return columnname_;
}
inline ::std::string* MSG_CS_DS_RTABLE_SEND_ACK::release_columnname() {
  clear_has_columnname();
  if (columnname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = columnname_;
    columnname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MSG_5fDS_5fCS_5fRTABLE_5fSEND_2eproto__INCLUDED
