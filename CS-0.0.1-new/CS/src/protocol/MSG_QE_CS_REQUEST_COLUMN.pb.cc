// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MSG_QE_CS_REQUEST_COLUMN.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MSG_QE_CS_REQUEST_COLUMN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_QE_CS_REQUEST_COLUMN_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_QE_CS_REQUEST_COLUMN_FILTER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_QE_CS_REQUEST_COLUMN_FILTER_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_CS_QE_REQUEST_COLUMN_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_CS_QE_REQUEST_COLUMN_ACK_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto() {
  protobuf_AddDesc_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MSG_QE_CS_REQUEST_COLUMN.proto");
  GOOGLE_CHECK(file != NULL);
  MSG_QE_CS_REQUEST_COLUMN_descriptor_ = file->message_type(0);
  static const int MSG_QE_CS_REQUEST_COLUMN_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_QE_CS_REQUEST_COLUMN, db_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_QE_CS_REQUEST_COLUMN, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_QE_CS_REQUEST_COLUMN, column_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_QE_CS_REQUEST_COLUMN, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_QE_CS_REQUEST_COLUMN, return_data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_QE_CS_REQUEST_COLUMN, is_local_),
  };
  MSG_QE_CS_REQUEST_COLUMN_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_QE_CS_REQUEST_COLUMN_descriptor_,
      MSG_QE_CS_REQUEST_COLUMN::default_instance_,
      MSG_QE_CS_REQUEST_COLUMN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_QE_CS_REQUEST_COLUMN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_QE_CS_REQUEST_COLUMN, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_QE_CS_REQUEST_COLUMN));
  MSG_QE_CS_REQUEST_COLUMN_FILTER_descriptor_ = MSG_QE_CS_REQUEST_COLUMN_descriptor_->nested_type(0);
  static const int MSG_QE_CS_REQUEST_COLUMN_FILTER_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_QE_CS_REQUEST_COLUMN_FILTER, operator__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_QE_CS_REQUEST_COLUMN_FILTER, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_QE_CS_REQUEST_COLUMN_FILTER, str_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_QE_CS_REQUEST_COLUMN_FILTER, int_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_QE_CS_REQUEST_COLUMN_FILTER, double_data_),
  };
  MSG_QE_CS_REQUEST_COLUMN_FILTER_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_QE_CS_REQUEST_COLUMN_FILTER_descriptor_,
      MSG_QE_CS_REQUEST_COLUMN_FILTER::default_instance_,
      MSG_QE_CS_REQUEST_COLUMN_FILTER_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_QE_CS_REQUEST_COLUMN_FILTER, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_QE_CS_REQUEST_COLUMN_FILTER, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_QE_CS_REQUEST_COLUMN_FILTER));
  MSG_CS_QE_REQUEST_COLUMN_ACK_descriptor_ = file->message_type(1);
  static const int MSG_CS_QE_REQUEST_COLUMN_ACK_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_QE_REQUEST_COLUMN_ACK, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_QE_REQUEST_COLUMN_ACK, row_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_QE_REQUEST_COLUMN_ACK, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_QE_REQUEST_COLUMN_ACK, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_QE_REQUEST_COLUMN_ACK, shm_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_QE_REQUEST_COLUMN_ACK, value_type_),
  };
  MSG_CS_QE_REQUEST_COLUMN_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_CS_QE_REQUEST_COLUMN_ACK_descriptor_,
      MSG_CS_QE_REQUEST_COLUMN_ACK::default_instance_,
      MSG_CS_QE_REQUEST_COLUMN_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_QE_REQUEST_COLUMN_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_QE_REQUEST_COLUMN_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_CS_QE_REQUEST_COLUMN_ACK));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_QE_CS_REQUEST_COLUMN_descriptor_, &MSG_QE_CS_REQUEST_COLUMN::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_QE_CS_REQUEST_COLUMN_FILTER_descriptor_, &MSG_QE_CS_REQUEST_COLUMN_FILTER::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_CS_QE_REQUEST_COLUMN_ACK_descriptor_, &MSG_CS_QE_REQUEST_COLUMN_ACK::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto() {
  delete MSG_QE_CS_REQUEST_COLUMN::default_instance_;
  delete MSG_QE_CS_REQUEST_COLUMN_reflection_;
  delete MSG_QE_CS_REQUEST_COLUMN_FILTER::default_instance_;
  delete MSG_QE_CS_REQUEST_COLUMN_FILTER_reflection_;
  delete MSG_CS_QE_REQUEST_COLUMN_ACK::default_instance_;
  delete MSG_CS_QE_REQUEST_COLUMN_ACK_reflection_;
}

void protobuf_AddDesc_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036MSG_QE_CS_REQUEST_COLUMN.proto\"\230\002\n\030MSG"
    "_QE_CS_REQUEST_COLUMN\022\r\n\005db_id\030\001 \002(\r\022\022\n\n"
    "table_name\030\002 \002(\t\022\023\n\013column_name\030\003 \002(\t\0220\n"
    "\006filter\030\004 \003(\0132 .MSG_QE_CS_REQUEST_COLUMN"
    ".FILTER\022\030\n\020return_data_type\030\005 \002(\010\022\020\n\010is_"
    "local\030\006 \002(\010\032f\n\006FILTER\022\020\n\010operator\030\001 \002(\r\022"
    "\021\n\tdata_type\030\002 \002(\r\022\020\n\010str_data\030\003 \001(\t\022\020\n\010"
    "int_data\030\004 \001(\005\022\023\n\013double_data\030\005 \001(\001\"\214\001\n\034"
    "MSG_CS_QE_REQUEST_COLUMN_ACK\022\023\n\013status_c"
    "ode\030\001 \002(\005\022\017\n\007row_key\030\002 \001(\t\022\021\n\tfrequency\030"
    "\003 \001(\t\022\r\n\005value\030\004 \001(\t\022\020\n\010shm_size\030\005 \001(\r\022\022"
    "\n\nvalue_type\030\006 \001(\r", 458);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MSG_QE_CS_REQUEST_COLUMN.proto", &protobuf_RegisterTypes);
  MSG_QE_CS_REQUEST_COLUMN::default_instance_ = new MSG_QE_CS_REQUEST_COLUMN();
  MSG_QE_CS_REQUEST_COLUMN_FILTER::default_instance_ = new MSG_QE_CS_REQUEST_COLUMN_FILTER();
  MSG_CS_QE_REQUEST_COLUMN_ACK::default_instance_ = new MSG_CS_QE_REQUEST_COLUMN_ACK();
  MSG_QE_CS_REQUEST_COLUMN::default_instance_->InitAsDefaultInstance();
  MSG_QE_CS_REQUEST_COLUMN_FILTER::default_instance_->InitAsDefaultInstance();
  MSG_CS_QE_REQUEST_COLUMN_ACK::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto {
  StaticDescriptorInitializer_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto() {
    protobuf_AddDesc_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto();
  }
} static_descriptor_initializer_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MSG_QE_CS_REQUEST_COLUMN_FILTER::kOperatorFieldNumber;
const int MSG_QE_CS_REQUEST_COLUMN_FILTER::kDataTypeFieldNumber;
const int MSG_QE_CS_REQUEST_COLUMN_FILTER::kStrDataFieldNumber;
const int MSG_QE_CS_REQUEST_COLUMN_FILTER::kIntDataFieldNumber;
const int MSG_QE_CS_REQUEST_COLUMN_FILTER::kDoubleDataFieldNumber;
#endif  // !_MSC_VER

MSG_QE_CS_REQUEST_COLUMN_FILTER::MSG_QE_CS_REQUEST_COLUMN_FILTER()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_QE_CS_REQUEST_COLUMN_FILTER::InitAsDefaultInstance() {
}

MSG_QE_CS_REQUEST_COLUMN_FILTER::MSG_QE_CS_REQUEST_COLUMN_FILTER(const MSG_QE_CS_REQUEST_COLUMN_FILTER& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_QE_CS_REQUEST_COLUMN_FILTER::SharedCtor() {
  _cached_size_ = 0;
  operator__ = 0u;
  data_type_ = 0u;
  str_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  int_data_ = 0;
  double_data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_QE_CS_REQUEST_COLUMN_FILTER::~MSG_QE_CS_REQUEST_COLUMN_FILTER() {
  SharedDtor();
}

void MSG_QE_CS_REQUEST_COLUMN_FILTER::SharedDtor() {
  if (str_data_ != &::google::protobuf::internal::kEmptyString) {
    delete str_data_;
  }
  if (this != default_instance_) {
  }
}

void MSG_QE_CS_REQUEST_COLUMN_FILTER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_QE_CS_REQUEST_COLUMN_FILTER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_QE_CS_REQUEST_COLUMN_FILTER_descriptor_;
}

const MSG_QE_CS_REQUEST_COLUMN_FILTER& MSG_QE_CS_REQUEST_COLUMN_FILTER::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto();  return *default_instance_;
}

MSG_QE_CS_REQUEST_COLUMN_FILTER* MSG_QE_CS_REQUEST_COLUMN_FILTER::default_instance_ = NULL;

MSG_QE_CS_REQUEST_COLUMN_FILTER* MSG_QE_CS_REQUEST_COLUMN_FILTER::New() const {
  return new MSG_QE_CS_REQUEST_COLUMN_FILTER;
}

void MSG_QE_CS_REQUEST_COLUMN_FILTER::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operator__ = 0u;
    data_type_ = 0u;
    if (has_str_data()) {
      if (str_data_ != &::google::protobuf::internal::kEmptyString) {
        str_data_->clear();
      }
    }
    int_data_ = 0;
    double_data_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_QE_CS_REQUEST_COLUMN_FILTER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 operator = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operator__)));
          set_has_operator_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_data_type;
        break;
      }
      
      // required uint32 data_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_type_)));
          set_has_data_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_str_data;
        break;
      }
      
      // optional string str_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_data().data(), this->str_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_int_data;
        break;
      }
      
      // optional int32 int_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_data_)));
          set_has_int_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_double_data;
        break;
      }
      
      // optional double double_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_double_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_data_)));
          set_has_double_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_QE_CS_REQUEST_COLUMN_FILTER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 operator = 1;
  if (has_operator_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->operator_(), output);
  }
  
  // required uint32 data_type = 2;
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->data_type(), output);
  }
  
  // optional string str_data = 3;
  if (has_str_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_data().data(), this->str_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->str_data(), output);
  }
  
  // optional int32 int_data = 4;
  if (has_int_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->int_data(), output);
  }
  
  // optional double double_data = 5;
  if (has_double_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->double_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_QE_CS_REQUEST_COLUMN_FILTER::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 operator = 1;
  if (has_operator_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->operator_(), target);
  }
  
  // required uint32 data_type = 2;
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->data_type(), target);
  }
  
  // optional string str_data = 3;
  if (has_str_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_data().data(), this->str_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->str_data(), target);
  }
  
  // optional int32 int_data = 4;
  if (has_int_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->int_data(), target);
  }
  
  // optional double double_data = 5;
  if (has_double_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->double_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_QE_CS_REQUEST_COLUMN_FILTER::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 operator = 1;
    if (has_operator_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operator_());
    }
    
    // required uint32 data_type = 2;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_type());
    }
    
    // optional string str_data = 3;
    if (has_str_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_data());
    }
    
    // optional int32 int_data = 4;
    if (has_int_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_data());
    }
    
    // optional double double_data = 5;
    if (has_double_data()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_QE_CS_REQUEST_COLUMN_FILTER::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_QE_CS_REQUEST_COLUMN_FILTER* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_QE_CS_REQUEST_COLUMN_FILTER*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_QE_CS_REQUEST_COLUMN_FILTER::MergeFrom(const MSG_QE_CS_REQUEST_COLUMN_FILTER& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operator_()) {
      set_operator_(from.operator_());
    }
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
    if (from.has_str_data()) {
      set_str_data(from.str_data());
    }
    if (from.has_int_data()) {
      set_int_data(from.int_data());
    }
    if (from.has_double_data()) {
      set_double_data(from.double_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_QE_CS_REQUEST_COLUMN_FILTER::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_QE_CS_REQUEST_COLUMN_FILTER::CopyFrom(const MSG_QE_CS_REQUEST_COLUMN_FILTER& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_QE_CS_REQUEST_COLUMN_FILTER::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MSG_QE_CS_REQUEST_COLUMN_FILTER::Swap(MSG_QE_CS_REQUEST_COLUMN_FILTER* other) {
  if (other != this) {
    std::swap(operator__, other->operator__);
    std::swap(data_type_, other->data_type_);
    std::swap(str_data_, other->str_data_);
    std::swap(int_data_, other->int_data_);
    std::swap(double_data_, other->double_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_QE_CS_REQUEST_COLUMN_FILTER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_QE_CS_REQUEST_COLUMN_FILTER_descriptor_;
  metadata.reflection = MSG_QE_CS_REQUEST_COLUMN_FILTER_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MSG_QE_CS_REQUEST_COLUMN::kDbIdFieldNumber;
const int MSG_QE_CS_REQUEST_COLUMN::kTableNameFieldNumber;
const int MSG_QE_CS_REQUEST_COLUMN::kColumnNameFieldNumber;
const int MSG_QE_CS_REQUEST_COLUMN::kFilterFieldNumber;
const int MSG_QE_CS_REQUEST_COLUMN::kReturnDataTypeFieldNumber;
const int MSG_QE_CS_REQUEST_COLUMN::kIsLocalFieldNumber;
#endif  // !_MSC_VER

MSG_QE_CS_REQUEST_COLUMN::MSG_QE_CS_REQUEST_COLUMN()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_QE_CS_REQUEST_COLUMN::InitAsDefaultInstance() {
}

MSG_QE_CS_REQUEST_COLUMN::MSG_QE_CS_REQUEST_COLUMN(const MSG_QE_CS_REQUEST_COLUMN& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_QE_CS_REQUEST_COLUMN::SharedCtor() {
  _cached_size_ = 0;
  db_id_ = 0u;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  column_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  return_data_type_ = false;
  is_local_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_QE_CS_REQUEST_COLUMN::~MSG_QE_CS_REQUEST_COLUMN() {
  SharedDtor();
}

void MSG_QE_CS_REQUEST_COLUMN::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (column_name_ != &::google::protobuf::internal::kEmptyString) {
    delete column_name_;
  }
  if (this != default_instance_) {
  }
}

void MSG_QE_CS_REQUEST_COLUMN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_QE_CS_REQUEST_COLUMN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_QE_CS_REQUEST_COLUMN_descriptor_;
}

const MSG_QE_CS_REQUEST_COLUMN& MSG_QE_CS_REQUEST_COLUMN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto();  return *default_instance_;
}

MSG_QE_CS_REQUEST_COLUMN* MSG_QE_CS_REQUEST_COLUMN::default_instance_ = NULL;

MSG_QE_CS_REQUEST_COLUMN* MSG_QE_CS_REQUEST_COLUMN::New() const {
  return new MSG_QE_CS_REQUEST_COLUMN;
}

void MSG_QE_CS_REQUEST_COLUMN::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    db_id_ = 0u;
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    if (has_column_name()) {
      if (column_name_ != &::google::protobuf::internal::kEmptyString) {
        column_name_->clear();
      }
    }
    return_data_type_ = false;
    is_local_ = false;
  }
  filter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_QE_CS_REQUEST_COLUMN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 db_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_id_)));
          set_has_db_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_name;
        break;
      }
      
      // required string table_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_column_name;
        break;
      }
      
      // required string column_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_column_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_column_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->column_name().data(), this->column_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_filter;
        break;
      }
      
      // repeated .MSG_QE_CS_REQUEST_COLUMN.FILTER filter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_filter;
        if (input->ExpectTag(40)) goto parse_return_data_type;
        break;
      }
      
      // required bool return_data_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_return_data_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_data_type_)));
          set_has_return_data_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_local;
        break;
      }
      
      // required bool is_local = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_local:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_local_)));
          set_has_is_local();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_QE_CS_REQUEST_COLUMN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 db_id = 1;
  if (has_db_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_id(), output);
  }
  
  // required string table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->table_name(), output);
  }
  
  // required string column_name = 3;
  if (has_column_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->column_name().data(), this->column_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->column_name(), output);
  }
  
  // repeated .MSG_QE_CS_REQUEST_COLUMN.FILTER filter = 4;
  for (int i = 0; i < this->filter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->filter(i), output);
  }
  
  // required bool return_data_type = 5;
  if (has_return_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->return_data_type(), output);
  }
  
  // required bool is_local = 6;
  if (has_is_local()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_local(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_QE_CS_REQUEST_COLUMN::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 db_id = 1;
  if (has_db_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->db_id(), target);
  }
  
  // required string table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table_name(), target);
  }
  
  // required string column_name = 3;
  if (has_column_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->column_name().data(), this->column_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->column_name(), target);
  }
  
  // repeated .MSG_QE_CS_REQUEST_COLUMN.FILTER filter = 4;
  for (int i = 0; i < this->filter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->filter(i), target);
  }
  
  // required bool return_data_type = 5;
  if (has_return_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->return_data_type(), target);
  }
  
  // required bool is_local = 6;
  if (has_is_local()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_local(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_QE_CS_REQUEST_COLUMN::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 db_id = 1;
    if (has_db_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_id());
    }
    
    // required string table_name = 2;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // required string column_name = 3;
    if (has_column_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->column_name());
    }
    
    // required bool return_data_type = 5;
    if (has_return_data_type()) {
      total_size += 1 + 1;
    }
    
    // required bool is_local = 6;
    if (has_is_local()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .MSG_QE_CS_REQUEST_COLUMN.FILTER filter = 4;
  total_size += 1 * this->filter_size();
  for (int i = 0; i < this->filter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filter(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_QE_CS_REQUEST_COLUMN::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_QE_CS_REQUEST_COLUMN* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_QE_CS_REQUEST_COLUMN*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_QE_CS_REQUEST_COLUMN::MergeFrom(const MSG_QE_CS_REQUEST_COLUMN& from) {
  GOOGLE_CHECK_NE(&from, this);
  filter_.MergeFrom(from.filter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_id()) {
      set_db_id(from.db_id());
    }
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_column_name()) {
      set_column_name(from.column_name());
    }
    if (from.has_return_data_type()) {
      set_return_data_type(from.return_data_type());
    }
    if (from.has_is_local()) {
      set_is_local(from.is_local());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_QE_CS_REQUEST_COLUMN::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_QE_CS_REQUEST_COLUMN::CopyFrom(const MSG_QE_CS_REQUEST_COLUMN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_QE_CS_REQUEST_COLUMN::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;
  
  for (int i = 0; i < filter_size(); i++) {
    if (!this->filter(i).IsInitialized()) return false;
  }
  return true;
}

void MSG_QE_CS_REQUEST_COLUMN::Swap(MSG_QE_CS_REQUEST_COLUMN* other) {
  if (other != this) {
    std::swap(db_id_, other->db_id_);
    std::swap(table_name_, other->table_name_);
    std::swap(column_name_, other->column_name_);
    filter_.Swap(&other->filter_);
    std::swap(return_data_type_, other->return_data_type_);
    std::swap(is_local_, other->is_local_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_QE_CS_REQUEST_COLUMN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_QE_CS_REQUEST_COLUMN_descriptor_;
  metadata.reflection = MSG_QE_CS_REQUEST_COLUMN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_CS_QE_REQUEST_COLUMN_ACK::kStatusCodeFieldNumber;
const int MSG_CS_QE_REQUEST_COLUMN_ACK::kRowKeyFieldNumber;
const int MSG_CS_QE_REQUEST_COLUMN_ACK::kFrequencyFieldNumber;
const int MSG_CS_QE_REQUEST_COLUMN_ACK::kValueFieldNumber;
const int MSG_CS_QE_REQUEST_COLUMN_ACK::kShmSizeFieldNumber;
const int MSG_CS_QE_REQUEST_COLUMN_ACK::kValueTypeFieldNumber;
#endif  // !_MSC_VER

MSG_CS_QE_REQUEST_COLUMN_ACK::MSG_CS_QE_REQUEST_COLUMN_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_CS_QE_REQUEST_COLUMN_ACK::InitAsDefaultInstance() {
}

MSG_CS_QE_REQUEST_COLUMN_ACK::MSG_CS_QE_REQUEST_COLUMN_ACK(const MSG_CS_QE_REQUEST_COLUMN_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_CS_QE_REQUEST_COLUMN_ACK::SharedCtor() {
  _cached_size_ = 0;
  status_code_ = 0;
  row_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frequency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shm_size_ = 0u;
  value_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_CS_QE_REQUEST_COLUMN_ACK::~MSG_CS_QE_REQUEST_COLUMN_ACK() {
  SharedDtor();
}

void MSG_CS_QE_REQUEST_COLUMN_ACK::SharedDtor() {
  if (row_key_ != &::google::protobuf::internal::kEmptyString) {
    delete row_key_;
  }
  if (frequency_ != &::google::protobuf::internal::kEmptyString) {
    delete frequency_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void MSG_CS_QE_REQUEST_COLUMN_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_CS_QE_REQUEST_COLUMN_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_CS_QE_REQUEST_COLUMN_ACK_descriptor_;
}

const MSG_CS_QE_REQUEST_COLUMN_ACK& MSG_CS_QE_REQUEST_COLUMN_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto();  return *default_instance_;
}

MSG_CS_QE_REQUEST_COLUMN_ACK* MSG_CS_QE_REQUEST_COLUMN_ACK::default_instance_ = NULL;

MSG_CS_QE_REQUEST_COLUMN_ACK* MSG_CS_QE_REQUEST_COLUMN_ACK::New() const {
  return new MSG_CS_QE_REQUEST_COLUMN_ACK;
}

void MSG_CS_QE_REQUEST_COLUMN_ACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_code_ = 0;
    if (has_row_key()) {
      if (row_key_ != &::google::protobuf::internal::kEmptyString) {
        row_key_->clear();
      }
    }
    if (has_frequency()) {
      if (frequency_ != &::google::protobuf::internal::kEmptyString) {
        frequency_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    shm_size_ = 0u;
    value_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_CS_QE_REQUEST_COLUMN_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_code_)));
          set_has_status_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_row_key;
        break;
      }
      
      // optional string row_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_row_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_row_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->row_key().data(), this->row_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_frequency;
        break;
      }
      
      // optional string frequency = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frequency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frequency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->frequency().data(), this->frequency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }
      
      // optional string value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_shm_size;
        break;
      }
      
      // optional uint32 shm_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shm_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shm_size_)));
          set_has_shm_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_value_type;
        break;
      }
      
      // optional uint32 value_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_type_)));
          set_has_value_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_CS_QE_REQUEST_COLUMN_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status_code = 1;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status_code(), output);
  }
  
  // optional string row_key = 2;
  if (has_row_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->row_key().data(), this->row_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->row_key(), output);
  }
  
  // optional string frequency = 3;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->frequency().data(), this->frequency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->frequency(), output);
  }
  
  // optional string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->value(), output);
  }
  
  // optional uint32 shm_size = 5;
  if (has_shm_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->shm_size(), output);
  }
  
  // optional uint32 value_type = 6;
  if (has_value_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->value_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_CS_QE_REQUEST_COLUMN_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status_code = 1;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status_code(), target);
  }
  
  // optional string row_key = 2;
  if (has_row_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->row_key().data(), this->row_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->row_key(), target);
  }
  
  // optional string frequency = 3;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->frequency().data(), this->frequency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->frequency(), target);
  }
  
  // optional string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->value(), target);
  }
  
  // optional uint32 shm_size = 5;
  if (has_shm_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->shm_size(), target);
  }
  
  // optional uint32 value_type = 6;
  if (has_value_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->value_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_CS_QE_REQUEST_COLUMN_ACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status_code = 1;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_code());
    }
    
    // optional string row_key = 2;
    if (has_row_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->row_key());
    }
    
    // optional string frequency = 3;
    if (has_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frequency());
    }
    
    // optional string value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
    // optional uint32 shm_size = 5;
    if (has_shm_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shm_size());
    }
    
    // optional uint32 value_type = 6;
    if (has_value_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_CS_QE_REQUEST_COLUMN_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_CS_QE_REQUEST_COLUMN_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_CS_QE_REQUEST_COLUMN_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_CS_QE_REQUEST_COLUMN_ACK::MergeFrom(const MSG_CS_QE_REQUEST_COLUMN_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
    if (from.has_row_key()) {
      set_row_key(from.row_key());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_shm_size()) {
      set_shm_size(from.shm_size());
    }
    if (from.has_value_type()) {
      set_value_type(from.value_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_CS_QE_REQUEST_COLUMN_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_CS_QE_REQUEST_COLUMN_ACK::CopyFrom(const MSG_CS_QE_REQUEST_COLUMN_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_CS_QE_REQUEST_COLUMN_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MSG_CS_QE_REQUEST_COLUMN_ACK::Swap(MSG_CS_QE_REQUEST_COLUMN_ACK* other) {
  if (other != this) {
    std::swap(status_code_, other->status_code_);
    std::swap(row_key_, other->row_key_);
    std::swap(frequency_, other->frequency_);
    std::swap(value_, other->value_);
    std::swap(shm_size_, other->shm_size_);
    std::swap(value_type_, other->value_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_CS_QE_REQUEST_COLUMN_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_CS_QE_REQUEST_COLUMN_ACK_descriptor_;
  metadata.reflection = MSG_CS_QE_REQUEST_COLUMN_ACK_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
