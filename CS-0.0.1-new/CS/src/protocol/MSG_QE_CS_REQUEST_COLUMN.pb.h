// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MSG_QE_CS_REQUEST_COLUMN.proto

#ifndef PROTOBUF_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto__INCLUDED
#define PROTOBUF_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto();
void protobuf_AssignDesc_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto();
void protobuf_ShutdownFile_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto();

class MSG_QE_CS_REQUEST_COLUMN;
class MSG_QE_CS_REQUEST_COLUMN_FILTER;
class MSG_CS_QE_REQUEST_COLUMN_ACK;

// ===================================================================

class MSG_QE_CS_REQUEST_COLUMN_FILTER : public ::google::protobuf::Message {
 public:
  MSG_QE_CS_REQUEST_COLUMN_FILTER();
  virtual ~MSG_QE_CS_REQUEST_COLUMN_FILTER();
  
  MSG_QE_CS_REQUEST_COLUMN_FILTER(const MSG_QE_CS_REQUEST_COLUMN_FILTER& from);
  
  inline MSG_QE_CS_REQUEST_COLUMN_FILTER& operator=(const MSG_QE_CS_REQUEST_COLUMN_FILTER& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_QE_CS_REQUEST_COLUMN_FILTER& default_instance();
  
  void Swap(MSG_QE_CS_REQUEST_COLUMN_FILTER* other);
  
  // implements Message ----------------------------------------------
  
  MSG_QE_CS_REQUEST_COLUMN_FILTER* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_QE_CS_REQUEST_COLUMN_FILTER& from);
  void MergeFrom(const MSG_QE_CS_REQUEST_COLUMN_FILTER& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 operator = 1;
  inline bool has_operator_() const;
  inline void clear_operator_();
  static const int kOperatorFieldNumber = 1;
  inline ::google::protobuf::uint32 operator_() const;
  inline void set_operator_(::google::protobuf::uint32 value);
  
  // required uint32 data_type = 2;
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 data_type() const;
  inline void set_data_type(::google::protobuf::uint32 value);
  
  // optional string str_data = 3;
  inline bool has_str_data() const;
  inline void clear_str_data();
  static const int kStrDataFieldNumber = 3;
  inline const ::std::string& str_data() const;
  inline void set_str_data(const ::std::string& value);
  inline void set_str_data(const char* value);
  inline void set_str_data(const char* value, size_t size);
  inline ::std::string* mutable_str_data();
  inline ::std::string* release_str_data();
  
  // optional int32 int_data = 4;
  inline bool has_int_data() const;
  inline void clear_int_data();
  static const int kIntDataFieldNumber = 4;
  inline ::google::protobuf::int32 int_data() const;
  inline void set_int_data(::google::protobuf::int32 value);
  
  // optional double double_data = 5;
  inline bool has_double_data() const;
  inline void clear_double_data();
  static const int kDoubleDataFieldNumber = 5;
  inline double double_data() const;
  inline void set_double_data(double value);
  
  // @@protoc_insertion_point(class_scope:MSG_QE_CS_REQUEST_COLUMN.FILTER)
 private:
  inline void set_has_operator_();
  inline void clear_has_operator_();
  inline void set_has_data_type();
  inline void clear_has_data_type();
  inline void set_has_str_data();
  inline void clear_has_str_data();
  inline void set_has_int_data();
  inline void clear_has_int_data();
  inline void set_has_double_data();
  inline void clear_has_double_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 operator__;
  ::google::protobuf::uint32 data_type_;
  ::std::string* str_data_;
  double double_data_;
  ::google::protobuf::int32 int_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto();
  friend void protobuf_AssignDesc_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto();
  
  void InitAsDefaultInstance();
  static MSG_QE_CS_REQUEST_COLUMN_FILTER* default_instance_;
};
// -------------------------------------------------------------------

class MSG_QE_CS_REQUEST_COLUMN : public ::google::protobuf::Message {
 public:
  MSG_QE_CS_REQUEST_COLUMN();
  virtual ~MSG_QE_CS_REQUEST_COLUMN();
  
  MSG_QE_CS_REQUEST_COLUMN(const MSG_QE_CS_REQUEST_COLUMN& from);
  
  inline MSG_QE_CS_REQUEST_COLUMN& operator=(const MSG_QE_CS_REQUEST_COLUMN& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_QE_CS_REQUEST_COLUMN& default_instance();
  
  void Swap(MSG_QE_CS_REQUEST_COLUMN* other);
  
  // implements Message ----------------------------------------------
  
  MSG_QE_CS_REQUEST_COLUMN* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_QE_CS_REQUEST_COLUMN& from);
  void MergeFrom(const MSG_QE_CS_REQUEST_COLUMN& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MSG_QE_CS_REQUEST_COLUMN_FILTER FILTER;
  
  // accessors -------------------------------------------------------
  
  // required uint32 db_id = 1;
  inline bool has_db_id() const;
  inline void clear_db_id();
  static const int kDbIdFieldNumber = 1;
  inline ::google::protobuf::uint32 db_id() const;
  inline void set_db_id(::google::protobuf::uint32 value);
  
  // required string table_name = 2;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 2;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  
  // required string column_name = 3;
  inline bool has_column_name() const;
  inline void clear_column_name();
  static const int kColumnNameFieldNumber = 3;
  inline const ::std::string& column_name() const;
  inline void set_column_name(const ::std::string& value);
  inline void set_column_name(const char* value);
  inline void set_column_name(const char* value, size_t size);
  inline ::std::string* mutable_column_name();
  inline ::std::string* release_column_name();
  
  // repeated .MSG_QE_CS_REQUEST_COLUMN.FILTER filter = 4;
  inline int filter_size() const;
  inline void clear_filter();
  static const int kFilterFieldNumber = 4;
  inline const ::MSG_QE_CS_REQUEST_COLUMN_FILTER& filter(int index) const;
  inline ::MSG_QE_CS_REQUEST_COLUMN_FILTER* mutable_filter(int index);
  inline ::MSG_QE_CS_REQUEST_COLUMN_FILTER* add_filter();
  inline const ::google::protobuf::RepeatedPtrField< ::MSG_QE_CS_REQUEST_COLUMN_FILTER >&
      filter() const;
  inline ::google::protobuf::RepeatedPtrField< ::MSG_QE_CS_REQUEST_COLUMN_FILTER >*
      mutable_filter();
  
  // required bool return_data_type = 5;
  inline bool has_return_data_type() const;
  inline void clear_return_data_type();
  static const int kReturnDataTypeFieldNumber = 5;
  inline bool return_data_type() const;
  inline void set_return_data_type(bool value);
  
  // required bool is_local = 6;
  inline bool has_is_local() const;
  inline void clear_is_local();
  static const int kIsLocalFieldNumber = 6;
  inline bool is_local() const;
  inline void set_is_local(bool value);
  
  // @@protoc_insertion_point(class_scope:MSG_QE_CS_REQUEST_COLUMN)
 private:
  inline void set_has_db_id();
  inline void clear_has_db_id();
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_column_name();
  inline void clear_has_column_name();
  inline void set_has_return_data_type();
  inline void clear_has_return_data_type();
  inline void set_has_is_local();
  inline void clear_has_is_local();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* table_name_;
  ::std::string* column_name_;
  ::google::protobuf::RepeatedPtrField< ::MSG_QE_CS_REQUEST_COLUMN_FILTER > filter_;
  ::google::protobuf::uint32 db_id_;
  bool return_data_type_;
  bool is_local_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto();
  friend void protobuf_AssignDesc_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto();
  
  void InitAsDefaultInstance();
  static MSG_QE_CS_REQUEST_COLUMN* default_instance_;
};
// -------------------------------------------------------------------

class MSG_CS_QE_REQUEST_COLUMN_ACK : public ::google::protobuf::Message {
 public:
  MSG_CS_QE_REQUEST_COLUMN_ACK();
  virtual ~MSG_CS_QE_REQUEST_COLUMN_ACK();
  
  MSG_CS_QE_REQUEST_COLUMN_ACK(const MSG_CS_QE_REQUEST_COLUMN_ACK& from);
  
  inline MSG_CS_QE_REQUEST_COLUMN_ACK& operator=(const MSG_CS_QE_REQUEST_COLUMN_ACK& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_CS_QE_REQUEST_COLUMN_ACK& default_instance();
  
  void Swap(MSG_CS_QE_REQUEST_COLUMN_ACK* other);
  
  // implements Message ----------------------------------------------
  
  MSG_CS_QE_REQUEST_COLUMN_ACK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_CS_QE_REQUEST_COLUMN_ACK& from);
  void MergeFrom(const MSG_CS_QE_REQUEST_COLUMN_ACK& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 status_code = 1;
  inline bool has_status_code() const;
  inline void clear_status_code();
  static const int kStatusCodeFieldNumber = 1;
  inline ::google::protobuf::int32 status_code() const;
  inline void set_status_code(::google::protobuf::int32 value);
  
  // optional string row_key = 2;
  inline bool has_row_key() const;
  inline void clear_row_key();
  static const int kRowKeyFieldNumber = 2;
  inline const ::std::string& row_key() const;
  inline void set_row_key(const ::std::string& value);
  inline void set_row_key(const char* value);
  inline void set_row_key(const char* value, size_t size);
  inline ::std::string* mutable_row_key();
  inline ::std::string* release_row_key();
  
  // optional string frequency = 3;
  inline bool has_frequency() const;
  inline void clear_frequency();
  static const int kFrequencyFieldNumber = 3;
  inline const ::std::string& frequency() const;
  inline void set_frequency(const ::std::string& value);
  inline void set_frequency(const char* value);
  inline void set_frequency(const char* value, size_t size);
  inline ::std::string* mutable_frequency();
  inline ::std::string* release_frequency();
  
  // optional string value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // optional uint32 shm_size = 5;
  inline bool has_shm_size() const;
  inline void clear_shm_size();
  static const int kShmSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 shm_size() const;
  inline void set_shm_size(::google::protobuf::uint32 value);
  
  // optional uint32 value_type = 6;
  inline bool has_value_type() const;
  inline void clear_value_type();
  static const int kValueTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 value_type() const;
  inline void set_value_type(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:MSG_CS_QE_REQUEST_COLUMN_ACK)
 private:
  inline void set_has_status_code();
  inline void clear_has_status_code();
  inline void set_has_row_key();
  inline void clear_has_row_key();
  inline void set_has_frequency();
  inline void clear_has_frequency();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_shm_size();
  inline void clear_has_shm_size();
  inline void set_has_value_type();
  inline void clear_has_value_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* row_key_;
  ::std::string* frequency_;
  ::google::protobuf::int32 status_code_;
  ::google::protobuf::uint32 shm_size_;
  ::std::string* value_;
  ::google::protobuf::uint32 value_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto();
  friend void protobuf_AssignDesc_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto();
  
  void InitAsDefaultInstance();
  static MSG_CS_QE_REQUEST_COLUMN_ACK* default_instance_;
};
// ===================================================================


// ===================================================================

// MSG_QE_CS_REQUEST_COLUMN_FILTER

// required uint32 operator = 1;
inline bool MSG_QE_CS_REQUEST_COLUMN_FILTER::has_operator_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_QE_CS_REQUEST_COLUMN_FILTER::set_has_operator_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSG_QE_CS_REQUEST_COLUMN_FILTER::clear_has_operator_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSG_QE_CS_REQUEST_COLUMN_FILTER::clear_operator_() {
  operator__ = 0u;
  clear_has_operator_();
}
inline ::google::protobuf::uint32 MSG_QE_CS_REQUEST_COLUMN_FILTER::operator_() const {
  return operator__;
}
inline void MSG_QE_CS_REQUEST_COLUMN_FILTER::set_operator_(::google::protobuf::uint32 value) {
  set_has_operator_();
  operator__ = value;
}

// required uint32 data_type = 2;
inline bool MSG_QE_CS_REQUEST_COLUMN_FILTER::has_data_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MSG_QE_CS_REQUEST_COLUMN_FILTER::set_has_data_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MSG_QE_CS_REQUEST_COLUMN_FILTER::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MSG_QE_CS_REQUEST_COLUMN_FILTER::clear_data_type() {
  data_type_ = 0u;
  clear_has_data_type();
}
inline ::google::protobuf::uint32 MSG_QE_CS_REQUEST_COLUMN_FILTER::data_type() const {
  return data_type_;
}
inline void MSG_QE_CS_REQUEST_COLUMN_FILTER::set_data_type(::google::protobuf::uint32 value) {
  set_has_data_type();
  data_type_ = value;
}

// optional string str_data = 3;
inline bool MSG_QE_CS_REQUEST_COLUMN_FILTER::has_str_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MSG_QE_CS_REQUEST_COLUMN_FILTER::set_has_str_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MSG_QE_CS_REQUEST_COLUMN_FILTER::clear_has_str_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MSG_QE_CS_REQUEST_COLUMN_FILTER::clear_str_data() {
  if (str_data_ != &::google::protobuf::internal::kEmptyString) {
    str_data_->clear();
  }
  clear_has_str_data();
}
inline const ::std::string& MSG_QE_CS_REQUEST_COLUMN_FILTER::str_data() const {
  return *str_data_;
}
inline void MSG_QE_CS_REQUEST_COLUMN_FILTER::set_str_data(const ::std::string& value) {
  set_has_str_data();
  if (str_data_ == &::google::protobuf::internal::kEmptyString) {
    str_data_ = new ::std::string;
  }
  str_data_->assign(value);
}
inline void MSG_QE_CS_REQUEST_COLUMN_FILTER::set_str_data(const char* value) {
  set_has_str_data();
  if (str_data_ == &::google::protobuf::internal::kEmptyString) {
    str_data_ = new ::std::string;
  }
  str_data_->assign(value);
}
inline void MSG_QE_CS_REQUEST_COLUMN_FILTER::set_str_data(const char* value, size_t size) {
  set_has_str_data();
  if (str_data_ == &::google::protobuf::internal::kEmptyString) {
    str_data_ = new ::std::string;
  }
  str_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSG_QE_CS_REQUEST_COLUMN_FILTER::mutable_str_data() {
  set_has_str_data();
  if (str_data_ == &::google::protobuf::internal::kEmptyString) {
    str_data_ = new ::std::string;
  }
  return str_data_;
}
inline ::std::string* MSG_QE_CS_REQUEST_COLUMN_FILTER::release_str_data() {
  clear_has_str_data();
  if (str_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_data_;
    str_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 int_data = 4;
inline bool MSG_QE_CS_REQUEST_COLUMN_FILTER::has_int_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MSG_QE_CS_REQUEST_COLUMN_FILTER::set_has_int_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MSG_QE_CS_REQUEST_COLUMN_FILTER::clear_has_int_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MSG_QE_CS_REQUEST_COLUMN_FILTER::clear_int_data() {
  int_data_ = 0;
  clear_has_int_data();
}
inline ::google::protobuf::int32 MSG_QE_CS_REQUEST_COLUMN_FILTER::int_data() const {
  return int_data_;
}
inline void MSG_QE_CS_REQUEST_COLUMN_FILTER::set_int_data(::google::protobuf::int32 value) {
  set_has_int_data();
  int_data_ = value;
}

// optional double double_data = 5;
inline bool MSG_QE_CS_REQUEST_COLUMN_FILTER::has_double_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MSG_QE_CS_REQUEST_COLUMN_FILTER::set_has_double_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MSG_QE_CS_REQUEST_COLUMN_FILTER::clear_has_double_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MSG_QE_CS_REQUEST_COLUMN_FILTER::clear_double_data() {
  double_data_ = 0;
  clear_has_double_data();
}
inline double MSG_QE_CS_REQUEST_COLUMN_FILTER::double_data() const {
  return double_data_;
}
inline void MSG_QE_CS_REQUEST_COLUMN_FILTER::set_double_data(double value) {
  set_has_double_data();
  double_data_ = value;
}

// -------------------------------------------------------------------

// MSG_QE_CS_REQUEST_COLUMN

// required uint32 db_id = 1;
inline bool MSG_QE_CS_REQUEST_COLUMN::has_db_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_QE_CS_REQUEST_COLUMN::set_has_db_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSG_QE_CS_REQUEST_COLUMN::clear_has_db_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSG_QE_CS_REQUEST_COLUMN::clear_db_id() {
  db_id_ = 0u;
  clear_has_db_id();
}
inline ::google::protobuf::uint32 MSG_QE_CS_REQUEST_COLUMN::db_id() const {
  return db_id_;
}
inline void MSG_QE_CS_REQUEST_COLUMN::set_db_id(::google::protobuf::uint32 value) {
  set_has_db_id();
  db_id_ = value;
}

// required string table_name = 2;
inline bool MSG_QE_CS_REQUEST_COLUMN::has_table_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MSG_QE_CS_REQUEST_COLUMN::set_has_table_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MSG_QE_CS_REQUEST_COLUMN::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MSG_QE_CS_REQUEST_COLUMN::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& MSG_QE_CS_REQUEST_COLUMN::table_name() const {
  return *table_name_;
}
inline void MSG_QE_CS_REQUEST_COLUMN::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void MSG_QE_CS_REQUEST_COLUMN::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void MSG_QE_CS_REQUEST_COLUMN::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSG_QE_CS_REQUEST_COLUMN::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* MSG_QE_CS_REQUEST_COLUMN::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string column_name = 3;
inline bool MSG_QE_CS_REQUEST_COLUMN::has_column_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MSG_QE_CS_REQUEST_COLUMN::set_has_column_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MSG_QE_CS_REQUEST_COLUMN::clear_has_column_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MSG_QE_CS_REQUEST_COLUMN::clear_column_name() {
  if (column_name_ != &::google::protobuf::internal::kEmptyString) {
    column_name_->clear();
  }
  clear_has_column_name();
}
inline const ::std::string& MSG_QE_CS_REQUEST_COLUMN::column_name() const {
  return *column_name_;
}
inline void MSG_QE_CS_REQUEST_COLUMN::set_column_name(const ::std::string& value) {
  set_has_column_name();
  if (column_name_ == &::google::protobuf::internal::kEmptyString) {
    column_name_ = new ::std::string;
  }
  column_name_->assign(value);
}
inline void MSG_QE_CS_REQUEST_COLUMN::set_column_name(const char* value) {
  set_has_column_name();
  if (column_name_ == &::google::protobuf::internal::kEmptyString) {
    column_name_ = new ::std::string;
  }
  column_name_->assign(value);
}
inline void MSG_QE_CS_REQUEST_COLUMN::set_column_name(const char* value, size_t size) {
  set_has_column_name();
  if (column_name_ == &::google::protobuf::internal::kEmptyString) {
    column_name_ = new ::std::string;
  }
  column_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSG_QE_CS_REQUEST_COLUMN::mutable_column_name() {
  set_has_column_name();
  if (column_name_ == &::google::protobuf::internal::kEmptyString) {
    column_name_ = new ::std::string;
  }
  return column_name_;
}
inline ::std::string* MSG_QE_CS_REQUEST_COLUMN::release_column_name() {
  clear_has_column_name();
  if (column_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = column_name_;
    column_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .MSG_QE_CS_REQUEST_COLUMN.FILTER filter = 4;
inline int MSG_QE_CS_REQUEST_COLUMN::filter_size() const {
  return filter_.size();
}
inline void MSG_QE_CS_REQUEST_COLUMN::clear_filter() {
  filter_.Clear();
}
inline const ::MSG_QE_CS_REQUEST_COLUMN_FILTER& MSG_QE_CS_REQUEST_COLUMN::filter(int index) const {
  return filter_.Get(index);
}
inline ::MSG_QE_CS_REQUEST_COLUMN_FILTER* MSG_QE_CS_REQUEST_COLUMN::mutable_filter(int index) {
  return filter_.Mutable(index);
}
inline ::MSG_QE_CS_REQUEST_COLUMN_FILTER* MSG_QE_CS_REQUEST_COLUMN::add_filter() {
  return filter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MSG_QE_CS_REQUEST_COLUMN_FILTER >&
MSG_QE_CS_REQUEST_COLUMN::filter() const {
  return filter_;
}
inline ::google::protobuf::RepeatedPtrField< ::MSG_QE_CS_REQUEST_COLUMN_FILTER >*
MSG_QE_CS_REQUEST_COLUMN::mutable_filter() {
  return &filter_;
}

// required bool return_data_type = 5;
inline bool MSG_QE_CS_REQUEST_COLUMN::has_return_data_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MSG_QE_CS_REQUEST_COLUMN::set_has_return_data_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MSG_QE_CS_REQUEST_COLUMN::clear_has_return_data_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MSG_QE_CS_REQUEST_COLUMN::clear_return_data_type() {
  return_data_type_ = false;
  clear_has_return_data_type();
}
inline bool MSG_QE_CS_REQUEST_COLUMN::return_data_type() const {
  return return_data_type_;
}
inline void MSG_QE_CS_REQUEST_COLUMN::set_return_data_type(bool value) {
  set_has_return_data_type();
  return_data_type_ = value;
}

// required bool is_local = 6;
inline bool MSG_QE_CS_REQUEST_COLUMN::has_is_local() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MSG_QE_CS_REQUEST_COLUMN::set_has_is_local() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MSG_QE_CS_REQUEST_COLUMN::clear_has_is_local() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MSG_QE_CS_REQUEST_COLUMN::clear_is_local() {
  is_local_ = false;
  clear_has_is_local();
}
inline bool MSG_QE_CS_REQUEST_COLUMN::is_local() const {
  return is_local_;
}
inline void MSG_QE_CS_REQUEST_COLUMN::set_is_local(bool value) {
  set_has_is_local();
  is_local_ = value;
}

// -------------------------------------------------------------------

// MSG_CS_QE_REQUEST_COLUMN_ACK

// required int32 status_code = 1;
inline bool MSG_CS_QE_REQUEST_COLUMN_ACK::has_status_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::set_has_status_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::clear_status_code() {
  status_code_ = 0;
  clear_has_status_code();
}
inline ::google::protobuf::int32 MSG_CS_QE_REQUEST_COLUMN_ACK::status_code() const {
  return status_code_;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::set_status_code(::google::protobuf::int32 value) {
  set_has_status_code();
  status_code_ = value;
}

// optional string row_key = 2;
inline bool MSG_CS_QE_REQUEST_COLUMN_ACK::has_row_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::set_has_row_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::clear_has_row_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::clear_row_key() {
  if (row_key_ != &::google::protobuf::internal::kEmptyString) {
    row_key_->clear();
  }
  clear_has_row_key();
}
inline const ::std::string& MSG_CS_QE_REQUEST_COLUMN_ACK::row_key() const {
  return *row_key_;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::set_row_key(const ::std::string& value) {
  set_has_row_key();
  if (row_key_ == &::google::protobuf::internal::kEmptyString) {
    row_key_ = new ::std::string;
  }
  row_key_->assign(value);
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::set_row_key(const char* value) {
  set_has_row_key();
  if (row_key_ == &::google::protobuf::internal::kEmptyString) {
    row_key_ = new ::std::string;
  }
  row_key_->assign(value);
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::set_row_key(const char* value, size_t size) {
  set_has_row_key();
  if (row_key_ == &::google::protobuf::internal::kEmptyString) {
    row_key_ = new ::std::string;
  }
  row_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSG_CS_QE_REQUEST_COLUMN_ACK::mutable_row_key() {
  set_has_row_key();
  if (row_key_ == &::google::protobuf::internal::kEmptyString) {
    row_key_ = new ::std::string;
  }
  return row_key_;
}
inline ::std::string* MSG_CS_QE_REQUEST_COLUMN_ACK::release_row_key() {
  clear_has_row_key();
  if (row_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = row_key_;
    row_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string frequency = 3;
inline bool MSG_CS_QE_REQUEST_COLUMN_ACK::has_frequency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::set_has_frequency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::clear_frequency() {
  if (frequency_ != &::google::protobuf::internal::kEmptyString) {
    frequency_->clear();
  }
  clear_has_frequency();
}
inline const ::std::string& MSG_CS_QE_REQUEST_COLUMN_ACK::frequency() const {
  return *frequency_;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::set_frequency(const ::std::string& value) {
  set_has_frequency();
  if (frequency_ == &::google::protobuf::internal::kEmptyString) {
    frequency_ = new ::std::string;
  }
  frequency_->assign(value);
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::set_frequency(const char* value) {
  set_has_frequency();
  if (frequency_ == &::google::protobuf::internal::kEmptyString) {
    frequency_ = new ::std::string;
  }
  frequency_->assign(value);
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::set_frequency(const char* value, size_t size) {
  set_has_frequency();
  if (frequency_ == &::google::protobuf::internal::kEmptyString) {
    frequency_ = new ::std::string;
  }
  frequency_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSG_CS_QE_REQUEST_COLUMN_ACK::mutable_frequency() {
  set_has_frequency();
  if (frequency_ == &::google::protobuf::internal::kEmptyString) {
    frequency_ = new ::std::string;
  }
  return frequency_;
}
inline ::std::string* MSG_CS_QE_REQUEST_COLUMN_ACK::release_frequency() {
  clear_has_frequency();
  if (frequency_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = frequency_;
    frequency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string value = 4;
inline bool MSG_CS_QE_REQUEST_COLUMN_ACK::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& MSG_CS_QE_REQUEST_COLUMN_ACK::value() const {
  return *value_;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSG_CS_QE_REQUEST_COLUMN_ACK::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* MSG_CS_QE_REQUEST_COLUMN_ACK::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 shm_size = 5;
inline bool MSG_CS_QE_REQUEST_COLUMN_ACK::has_shm_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::set_has_shm_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::clear_has_shm_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::clear_shm_size() {
  shm_size_ = 0u;
  clear_has_shm_size();
}
inline ::google::protobuf::uint32 MSG_CS_QE_REQUEST_COLUMN_ACK::shm_size() const {
  return shm_size_;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::set_shm_size(::google::protobuf::uint32 value) {
  set_has_shm_size();
  shm_size_ = value;
}

// optional uint32 value_type = 6;
inline bool MSG_CS_QE_REQUEST_COLUMN_ACK::has_value_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::set_has_value_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::clear_has_value_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::clear_value_type() {
  value_type_ = 0u;
  clear_has_value_type();
}
inline ::google::protobuf::uint32 MSG_CS_QE_REQUEST_COLUMN_ACK::value_type() const {
  return value_type_;
}
inline void MSG_CS_QE_REQUEST_COLUMN_ACK::set_value_type(::google::protobuf::uint32 value) {
  set_has_value_type();
  value_type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MSG_5fQE_5fCS_5fREQUEST_5fCOLUMN_2eproto__INCLUDED
