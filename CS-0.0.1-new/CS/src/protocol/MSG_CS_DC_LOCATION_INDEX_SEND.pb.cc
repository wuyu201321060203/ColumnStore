// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MSG_CS_DC_LOCATION_INDEX_SEND.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* INDEX_BORDER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  INDEX_BORDER_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* INDEX_BORDER_DICT_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MSG_CS_DC_LOCATION_INDEX_SEND_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_CS_DC_LOCATION_INDEX_SEND_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_DC_CS_LOCATION_INDEX_SEND_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_DC_CS_LOCATION_INDEX_SEND_ACK_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MSG_5fCS_5fDC_5fLOCATION_5fINDEX_5fSEND_2eproto() {
  protobuf_AddDesc_MSG_5fCS_5fDC_5fLOCATION_5fINDEX_5fSEND_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MSG_CS_DC_LOCATION_INDEX_SEND.proto");
  GOOGLE_CHECK(file != NULL);
  INDEX_BORDER_descriptor_ = file->message_type(0);
  static const int INDEX_BORDER_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INDEX_BORDER, dicttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INDEX_BORDER, dictupper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INDEX_BORDER, dictlower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INDEX_BORDER, entryupper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INDEX_BORDER, entrylower_),
  };
  INDEX_BORDER_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      INDEX_BORDER_descriptor_,
      INDEX_BORDER::default_instance_,
      INDEX_BORDER_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INDEX_BORDER, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INDEX_BORDER, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(INDEX_BORDER));
  INDEX_BORDER_DICT_TYPE_descriptor_ = INDEX_BORDER_descriptor_->enum_type(0);
  MSG_CS_DC_LOCATION_INDEX_SEND_descriptor_ = file->message_type(1);
  static const int MSG_CS_DC_LOCATION_INDEX_SEND_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_DC_LOCATION_INDEX_SEND, dbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_DC_LOCATION_INDEX_SEND, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_DC_LOCATION_INDEX_SEND, columnname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_DC_LOCATION_INDEX_SEND, colindexborder_),
  };
  MSG_CS_DC_LOCATION_INDEX_SEND_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_CS_DC_LOCATION_INDEX_SEND_descriptor_,
      MSG_CS_DC_LOCATION_INDEX_SEND::default_instance_,
      MSG_CS_DC_LOCATION_INDEX_SEND_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_DC_LOCATION_INDEX_SEND, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_DC_LOCATION_INDEX_SEND, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_CS_DC_LOCATION_INDEX_SEND));
  MSG_DC_CS_LOCATION_INDEX_SEND_ACK_descriptor_ = file->message_type(2);
  static const int MSG_DC_CS_LOCATION_INDEX_SEND_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DC_CS_LOCATION_INDEX_SEND_ACK, statuscode_),
  };
  MSG_DC_CS_LOCATION_INDEX_SEND_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_DC_CS_LOCATION_INDEX_SEND_ACK_descriptor_,
      MSG_DC_CS_LOCATION_INDEX_SEND_ACK::default_instance_,
      MSG_DC_CS_LOCATION_INDEX_SEND_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DC_CS_LOCATION_INDEX_SEND_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DC_CS_LOCATION_INDEX_SEND_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_DC_CS_LOCATION_INDEX_SEND_ACK));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MSG_5fCS_5fDC_5fLOCATION_5fINDEX_5fSEND_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    INDEX_BORDER_descriptor_, &INDEX_BORDER::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_CS_DC_LOCATION_INDEX_SEND_descriptor_, &MSG_CS_DC_LOCATION_INDEX_SEND::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_DC_CS_LOCATION_INDEX_SEND_ACK_descriptor_, &MSG_DC_CS_LOCATION_INDEX_SEND_ACK::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MSG_5fCS_5fDC_5fLOCATION_5fINDEX_5fSEND_2eproto() {
  delete INDEX_BORDER::default_instance_;
  delete INDEX_BORDER_reflection_;
  delete MSG_CS_DC_LOCATION_INDEX_SEND::default_instance_;
  delete MSG_CS_DC_LOCATION_INDEX_SEND_reflection_;
  delete MSG_DC_CS_LOCATION_INDEX_SEND_ACK::default_instance_;
  delete MSG_DC_CS_LOCATION_INDEX_SEND_ACK_reflection_;
}

void protobuf_AddDesc_MSG_5fCS_5fDC_5fLOCATION_5fINDEX_5fSEND_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#MSG_CS_DC_LOCATION_INDEX_SEND.proto\032\014c"
    "ommon.proto\"\373\001\n\014INDEX_BORDER\022)\n\010dictType"
    "\030\001 \002(\0162\027.INDEX_BORDER.DICT_TYPE\022\036\n\tdictU"
    "pper\030\002 \002(\0132\013.DICT_VALUE\022\036\n\tdictLower\030\003 \002"
    "(\0132\013.DICT_VALUE\022\022\n\nentryUpper\030\004 \002(\r\022\022\n\ne"
    "ntryLower\030\005 \002(\r\"X\n\tDICT_TYPE\022\013\n\007VARCHAR\020"
    "\000\022\013\n\007INTTYPE\020\001\022\016\n\nDOUBLETYPE\020\002\022\010\n\004TEXT\020\003"
    "\022\010\n\004BLOB\020\004\022\r\n\tTIMESTAMP\020\005\"{\n\035MSG_CS_DC_L"
    "OCATION_INDEX_SEND\022\014\n\004dbID\030\001 \002(\r\022\021\n\ttabl"
    "eName\030\002 \002(\t\022\022\n\ncolumnName\030\003 \002(\t\022%\n\016colIn"
    "dexBorder\030\004 \002(\0132\r.INDEX_BORDER\"7\n!MSG_DC"
    "_CS_LOCATION_INDEX_SEND_ACK\022\022\n\nstatusCod"
    "e\030\001 \002(\005", 487);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MSG_CS_DC_LOCATION_INDEX_SEND.proto", &protobuf_RegisterTypes);
  INDEX_BORDER::default_instance_ = new INDEX_BORDER();
  MSG_CS_DC_LOCATION_INDEX_SEND::default_instance_ = new MSG_CS_DC_LOCATION_INDEX_SEND();
  MSG_DC_CS_LOCATION_INDEX_SEND_ACK::default_instance_ = new MSG_DC_CS_LOCATION_INDEX_SEND_ACK();
  INDEX_BORDER::default_instance_->InitAsDefaultInstance();
  MSG_CS_DC_LOCATION_INDEX_SEND::default_instance_->InitAsDefaultInstance();
  MSG_DC_CS_LOCATION_INDEX_SEND_ACK::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MSG_5fCS_5fDC_5fLOCATION_5fINDEX_5fSEND_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MSG_5fCS_5fDC_5fLOCATION_5fINDEX_5fSEND_2eproto {
  StaticDescriptorInitializer_MSG_5fCS_5fDC_5fLOCATION_5fINDEX_5fSEND_2eproto() {
    protobuf_AddDesc_MSG_5fCS_5fDC_5fLOCATION_5fINDEX_5fSEND_2eproto();
  }
} static_descriptor_initializer_MSG_5fCS_5fDC_5fLOCATION_5fINDEX_5fSEND_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* INDEX_BORDER_DICT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return INDEX_BORDER_DICT_TYPE_descriptor_;
}
bool INDEX_BORDER_DICT_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const INDEX_BORDER_DICT_TYPE INDEX_BORDER::VARCHAR;
const INDEX_BORDER_DICT_TYPE INDEX_BORDER::INTTYPE;
const INDEX_BORDER_DICT_TYPE INDEX_BORDER::DOUBLETYPE;
const INDEX_BORDER_DICT_TYPE INDEX_BORDER::TEXT;
const INDEX_BORDER_DICT_TYPE INDEX_BORDER::BLOB;
const INDEX_BORDER_DICT_TYPE INDEX_BORDER::TIMESTAMP;
const INDEX_BORDER_DICT_TYPE INDEX_BORDER::DICT_TYPE_MIN;
const INDEX_BORDER_DICT_TYPE INDEX_BORDER::DICT_TYPE_MAX;
const int INDEX_BORDER::DICT_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int INDEX_BORDER::kDictTypeFieldNumber;
const int INDEX_BORDER::kDictUpperFieldNumber;
const int INDEX_BORDER::kDictLowerFieldNumber;
const int INDEX_BORDER::kEntryUpperFieldNumber;
const int INDEX_BORDER::kEntryLowerFieldNumber;
#endif  // !_MSC_VER

INDEX_BORDER::INDEX_BORDER()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void INDEX_BORDER::InitAsDefaultInstance() {
  dictupper_ = const_cast< ::DICT_VALUE*>(&::DICT_VALUE::default_instance());
  dictlower_ = const_cast< ::DICT_VALUE*>(&::DICT_VALUE::default_instance());
}

INDEX_BORDER::INDEX_BORDER(const INDEX_BORDER& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void INDEX_BORDER::SharedCtor() {
  _cached_size_ = 0;
  dicttype_ = 0;
  dictupper_ = NULL;
  dictlower_ = NULL;
  entryupper_ = 0u;
  entrylower_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

INDEX_BORDER::~INDEX_BORDER() {
  SharedDtor();
}

void INDEX_BORDER::SharedDtor() {
  if (this != default_instance_) {
    delete dictupper_;
    delete dictlower_;
  }
}

void INDEX_BORDER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* INDEX_BORDER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return INDEX_BORDER_descriptor_;
}

const INDEX_BORDER& INDEX_BORDER::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fCS_5fDC_5fLOCATION_5fINDEX_5fSEND_2eproto();  return *default_instance_;
}

INDEX_BORDER* INDEX_BORDER::default_instance_ = NULL;

INDEX_BORDER* INDEX_BORDER::New() const {
  return new INDEX_BORDER;
}

void INDEX_BORDER::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dicttype_ = 0;
    if (has_dictupper()) {
      if (dictupper_ != NULL) dictupper_->::DICT_VALUE::Clear();
    }
    if (has_dictlower()) {
      if (dictlower_ != NULL) dictlower_->::DICT_VALUE::Clear();
    }
    entryupper_ = 0u;
    entrylower_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool INDEX_BORDER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .INDEX_BORDER.DICT_TYPE dictType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::INDEX_BORDER_DICT_TYPE_IsValid(value)) {
            set_dicttype(static_cast< ::INDEX_BORDER_DICT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dictUpper;
        break;
      }
      
      // required .DICT_VALUE dictUpper = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dictUpper:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dictupper()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dictLower;
        break;
      }
      
      // required .DICT_VALUE dictLower = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dictLower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dictlower()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_entryUpper;
        break;
      }
      
      // required uint32 entryUpper = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entryUpper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entryupper_)));
          set_has_entryupper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_entryLower;
        break;
      }
      
      // required uint32 entryLower = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entryLower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entrylower_)));
          set_has_entrylower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void INDEX_BORDER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .INDEX_BORDER.DICT_TYPE dictType = 1;
  if (has_dicttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dicttype(), output);
  }
  
  // required .DICT_VALUE dictUpper = 2;
  if (has_dictupper()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dictupper(), output);
  }
  
  // required .DICT_VALUE dictLower = 3;
  if (has_dictlower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dictlower(), output);
  }
  
  // required uint32 entryUpper = 4;
  if (has_entryupper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->entryupper(), output);
  }
  
  // required uint32 entryLower = 5;
  if (has_entrylower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->entrylower(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* INDEX_BORDER::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .INDEX_BORDER.DICT_TYPE dictType = 1;
  if (has_dicttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dicttype(), target);
  }
  
  // required .DICT_VALUE dictUpper = 2;
  if (has_dictupper()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dictupper(), target);
  }
  
  // required .DICT_VALUE dictLower = 3;
  if (has_dictlower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dictlower(), target);
  }
  
  // required uint32 entryUpper = 4;
  if (has_entryupper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->entryupper(), target);
  }
  
  // required uint32 entryLower = 5;
  if (has_entrylower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->entrylower(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int INDEX_BORDER::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .INDEX_BORDER.DICT_TYPE dictType = 1;
    if (has_dicttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dicttype());
    }
    
    // required .DICT_VALUE dictUpper = 2;
    if (has_dictupper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dictupper());
    }
    
    // required .DICT_VALUE dictLower = 3;
    if (has_dictlower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dictlower());
    }
    
    // required uint32 entryUpper = 4;
    if (has_entryupper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entryupper());
    }
    
    // required uint32 entryLower = 5;
    if (has_entrylower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entrylower());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void INDEX_BORDER::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const INDEX_BORDER* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const INDEX_BORDER*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void INDEX_BORDER::MergeFrom(const INDEX_BORDER& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dicttype()) {
      set_dicttype(from.dicttype());
    }
    if (from.has_dictupper()) {
      mutable_dictupper()->::DICT_VALUE::MergeFrom(from.dictupper());
    }
    if (from.has_dictlower()) {
      mutable_dictlower()->::DICT_VALUE::MergeFrom(from.dictlower());
    }
    if (from.has_entryupper()) {
      set_entryupper(from.entryupper());
    }
    if (from.has_entrylower()) {
      set_entrylower(from.entrylower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void INDEX_BORDER::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void INDEX_BORDER::CopyFrom(const INDEX_BORDER& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool INDEX_BORDER::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void INDEX_BORDER::Swap(INDEX_BORDER* other) {
  if (other != this) {
    std::swap(dicttype_, other->dicttype_);
    std::swap(dictupper_, other->dictupper_);
    std::swap(dictlower_, other->dictlower_);
    std::swap(entryupper_, other->entryupper_);
    std::swap(entrylower_, other->entrylower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata INDEX_BORDER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = INDEX_BORDER_descriptor_;
  metadata.reflection = INDEX_BORDER_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_CS_DC_LOCATION_INDEX_SEND::kDbIDFieldNumber;
const int MSG_CS_DC_LOCATION_INDEX_SEND::kTableNameFieldNumber;
const int MSG_CS_DC_LOCATION_INDEX_SEND::kColumnNameFieldNumber;
const int MSG_CS_DC_LOCATION_INDEX_SEND::kColIndexBorderFieldNumber;
#endif  // !_MSC_VER

MSG_CS_DC_LOCATION_INDEX_SEND::MSG_CS_DC_LOCATION_INDEX_SEND()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_CS_DC_LOCATION_INDEX_SEND::InitAsDefaultInstance() {
  colindexborder_ = const_cast< ::INDEX_BORDER*>(&::INDEX_BORDER::default_instance());
}

MSG_CS_DC_LOCATION_INDEX_SEND::MSG_CS_DC_LOCATION_INDEX_SEND(const MSG_CS_DC_LOCATION_INDEX_SEND& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_CS_DC_LOCATION_INDEX_SEND::SharedCtor() {
  _cached_size_ = 0;
  dbid_ = 0u;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  columnname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  colindexborder_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_CS_DC_LOCATION_INDEX_SEND::~MSG_CS_DC_LOCATION_INDEX_SEND() {
  SharedDtor();
}

void MSG_CS_DC_LOCATION_INDEX_SEND::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (columnname_ != &::google::protobuf::internal::kEmptyString) {
    delete columnname_;
  }
  if (this != default_instance_) {
    delete colindexborder_;
  }
}

void MSG_CS_DC_LOCATION_INDEX_SEND::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_CS_DC_LOCATION_INDEX_SEND::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_CS_DC_LOCATION_INDEX_SEND_descriptor_;
}

const MSG_CS_DC_LOCATION_INDEX_SEND& MSG_CS_DC_LOCATION_INDEX_SEND::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fCS_5fDC_5fLOCATION_5fINDEX_5fSEND_2eproto();  return *default_instance_;
}

MSG_CS_DC_LOCATION_INDEX_SEND* MSG_CS_DC_LOCATION_INDEX_SEND::default_instance_ = NULL;

MSG_CS_DC_LOCATION_INDEX_SEND* MSG_CS_DC_LOCATION_INDEX_SEND::New() const {
  return new MSG_CS_DC_LOCATION_INDEX_SEND;
}

void MSG_CS_DC_LOCATION_INDEX_SEND::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dbid_ = 0u;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    if (has_columnname()) {
      if (columnname_ != &::google::protobuf::internal::kEmptyString) {
        columnname_->clear();
      }
    }
    if (has_colindexborder()) {
      if (colindexborder_ != NULL) colindexborder_->::INDEX_BORDER::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_CS_DC_LOCATION_INDEX_SEND::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dbID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dbid_)));
          set_has_dbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tableName;
        break;
      }
      
      // required string tableName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tableName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_columnName;
        break;
      }
      
      // required string columnName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_columnName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_columnname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->columnname().data(), this->columnname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_colIndexBorder;
        break;
      }
      
      // required .INDEX_BORDER colIndexBorder = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_colIndexBorder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_colindexborder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_CS_DC_LOCATION_INDEX_SEND::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dbID = 1;
  if (has_dbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dbid(), output);
  }
  
  // required string tableName = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tablename(), output);
  }
  
  // required string columnName = 3;
  if (has_columnname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->columnname().data(), this->columnname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->columnname(), output);
  }
  
  // required .INDEX_BORDER colIndexBorder = 4;
  if (has_colindexborder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->colindexborder(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_CS_DC_LOCATION_INDEX_SEND::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dbID = 1;
  if (has_dbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dbid(), target);
  }
  
  // required string tableName = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tablename(), target);
  }
  
  // required string columnName = 3;
  if (has_columnname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->columnname().data(), this->columnname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->columnname(), target);
  }
  
  // required .INDEX_BORDER colIndexBorder = 4;
  if (has_colindexborder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->colindexborder(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_CS_DC_LOCATION_INDEX_SEND::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dbID = 1;
    if (has_dbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dbid());
    }
    
    // required string tableName = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }
    
    // required string columnName = 3;
    if (has_columnname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->columnname());
    }
    
    // required .INDEX_BORDER colIndexBorder = 4;
    if (has_colindexborder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->colindexborder());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_CS_DC_LOCATION_INDEX_SEND::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_CS_DC_LOCATION_INDEX_SEND* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_CS_DC_LOCATION_INDEX_SEND*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_CS_DC_LOCATION_INDEX_SEND::MergeFrom(const MSG_CS_DC_LOCATION_INDEX_SEND& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dbid()) {
      set_dbid(from.dbid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_columnname()) {
      set_columnname(from.columnname());
    }
    if (from.has_colindexborder()) {
      mutable_colindexborder()->::INDEX_BORDER::MergeFrom(from.colindexborder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_CS_DC_LOCATION_INDEX_SEND::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_CS_DC_LOCATION_INDEX_SEND::CopyFrom(const MSG_CS_DC_LOCATION_INDEX_SEND& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_CS_DC_LOCATION_INDEX_SEND::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_colindexborder()) {
    if (!this->colindexborder().IsInitialized()) return false;
  }
  return true;
}

void MSG_CS_DC_LOCATION_INDEX_SEND::Swap(MSG_CS_DC_LOCATION_INDEX_SEND* other) {
  if (other != this) {
    std::swap(dbid_, other->dbid_);
    std::swap(tablename_, other->tablename_);
    std::swap(columnname_, other->columnname_);
    std::swap(colindexborder_, other->colindexborder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_CS_DC_LOCATION_INDEX_SEND::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_CS_DC_LOCATION_INDEX_SEND_descriptor_;
  metadata.reflection = MSG_CS_DC_LOCATION_INDEX_SEND_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_DC_CS_LOCATION_INDEX_SEND_ACK::kStatusCodeFieldNumber;
#endif  // !_MSC_VER

MSG_DC_CS_LOCATION_INDEX_SEND_ACK::MSG_DC_CS_LOCATION_INDEX_SEND_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_DC_CS_LOCATION_INDEX_SEND_ACK::InitAsDefaultInstance() {
}

MSG_DC_CS_LOCATION_INDEX_SEND_ACK::MSG_DC_CS_LOCATION_INDEX_SEND_ACK(const MSG_DC_CS_LOCATION_INDEX_SEND_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_DC_CS_LOCATION_INDEX_SEND_ACK::SharedCtor() {
  _cached_size_ = 0;
  statuscode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_DC_CS_LOCATION_INDEX_SEND_ACK::~MSG_DC_CS_LOCATION_INDEX_SEND_ACK() {
  SharedDtor();
}

void MSG_DC_CS_LOCATION_INDEX_SEND_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSG_DC_CS_LOCATION_INDEX_SEND_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_DC_CS_LOCATION_INDEX_SEND_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DC_CS_LOCATION_INDEX_SEND_ACK_descriptor_;
}

const MSG_DC_CS_LOCATION_INDEX_SEND_ACK& MSG_DC_CS_LOCATION_INDEX_SEND_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fCS_5fDC_5fLOCATION_5fINDEX_5fSEND_2eproto();  return *default_instance_;
}

MSG_DC_CS_LOCATION_INDEX_SEND_ACK* MSG_DC_CS_LOCATION_INDEX_SEND_ACK::default_instance_ = NULL;

MSG_DC_CS_LOCATION_INDEX_SEND_ACK* MSG_DC_CS_LOCATION_INDEX_SEND_ACK::New() const {
  return new MSG_DC_CS_LOCATION_INDEX_SEND_ACK;
}

void MSG_DC_CS_LOCATION_INDEX_SEND_ACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    statuscode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_DC_CS_LOCATION_INDEX_SEND_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statusCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_DC_CS_LOCATION_INDEX_SEND_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_DC_CS_LOCATION_INDEX_SEND_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_DC_CS_LOCATION_INDEX_SEND_ACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statusCode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_DC_CS_LOCATION_INDEX_SEND_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_DC_CS_LOCATION_INDEX_SEND_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_DC_CS_LOCATION_INDEX_SEND_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_DC_CS_LOCATION_INDEX_SEND_ACK::MergeFrom(const MSG_DC_CS_LOCATION_INDEX_SEND_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_DC_CS_LOCATION_INDEX_SEND_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DC_CS_LOCATION_INDEX_SEND_ACK::CopyFrom(const MSG_DC_CS_LOCATION_INDEX_SEND_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DC_CS_LOCATION_INDEX_SEND_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MSG_DC_CS_LOCATION_INDEX_SEND_ACK::Swap(MSG_DC_CS_LOCATION_INDEX_SEND_ACK* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_DC_CS_LOCATION_INDEX_SEND_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_DC_CS_LOCATION_INDEX_SEND_ACK_descriptor_;
  metadata.reflection = MSG_DC_CS_LOCATION_INDEX_SEND_ACK_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
