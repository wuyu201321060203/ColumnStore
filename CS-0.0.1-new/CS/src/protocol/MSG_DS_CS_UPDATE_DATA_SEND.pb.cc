// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MSG_DS_CS_UPDATE_DATA_SEND.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MSG_DS_CS_UPDATE_DATA_SEND_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_DS_CS_UPDATE_DATA_SEND_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MSG_DS_CS_UPDATE_DATA_SEND_COL_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MSG_CS_DS_UPDATE_DATA_SEND_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_CS_DS_UPDATE_DATA_SEND_ACK_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MSG_CS_DS_UPDATE_DATA_SEND_ACK_COL_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MSG_5fDS_5fCS_5fUPDATE_5fDATA_5fSEND_2eproto() {
  protobuf_AddDesc_MSG_5fDS_5fCS_5fUPDATE_5fDATA_5fSEND_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MSG_DS_CS_UPDATE_DATA_SEND.proto");
  GOOGLE_CHECK(file != NULL);
  MSG_DS_CS_UPDATE_DATA_SEND_descriptor_ = file->message_type(0);
  static const int MSG_DS_CS_UPDATE_DATA_SEND_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_CS_UPDATE_DATA_SEND, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_CS_UPDATE_DATA_SEND, dbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_CS_UPDATE_DATA_SEND, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_CS_UPDATE_DATA_SEND, columnname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_CS_UPDATE_DATA_SEND, columntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_CS_UPDATE_DATA_SEND, dicvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_CS_UPDATE_DATA_SEND, indexoffsets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_CS_UPDATE_DATA_SEND, indexposting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_CS_UPDATE_DATA_SEND, sliceno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_CS_UPDATE_DATA_SEND, slicenum_),
  };
  MSG_DS_CS_UPDATE_DATA_SEND_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_DS_CS_UPDATE_DATA_SEND_descriptor_,
      MSG_DS_CS_UPDATE_DATA_SEND::default_instance_,
      MSG_DS_CS_UPDATE_DATA_SEND_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_CS_UPDATE_DATA_SEND, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_CS_UPDATE_DATA_SEND, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_DS_CS_UPDATE_DATA_SEND));
  MSG_DS_CS_UPDATE_DATA_SEND_COL_TYPE_descriptor_ = MSG_DS_CS_UPDATE_DATA_SEND_descriptor_->enum_type(0);
  MSG_CS_DS_UPDATE_DATA_SEND_ACK_descriptor_ = file->message_type(1);
  static const int MSG_CS_DS_UPDATE_DATA_SEND_ACK_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_DS_UPDATE_DATA_SEND_ACK, dbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_DS_UPDATE_DATA_SEND_ACK, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_DS_UPDATE_DATA_SEND_ACK, columnname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_DS_UPDATE_DATA_SEND_ACK, columntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_DS_UPDATE_DATA_SEND_ACK, dicvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_DS_UPDATE_DATA_SEND_ACK, xvector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_DS_UPDATE_DATA_SEND_ACK, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_DS_UPDATE_DATA_SEND_ACK, statuscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_DS_UPDATE_DATA_SEND_ACK, sliceno_),
  };
  MSG_CS_DS_UPDATE_DATA_SEND_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_CS_DS_UPDATE_DATA_SEND_ACK_descriptor_,
      MSG_CS_DS_UPDATE_DATA_SEND_ACK::default_instance_,
      MSG_CS_DS_UPDATE_DATA_SEND_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_DS_UPDATE_DATA_SEND_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_CS_DS_UPDATE_DATA_SEND_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_CS_DS_UPDATE_DATA_SEND_ACK));
  MSG_CS_DS_UPDATE_DATA_SEND_ACK_COL_TYPE_descriptor_ = MSG_CS_DS_UPDATE_DATA_SEND_ACK_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MSG_5fDS_5fCS_5fUPDATE_5fDATA_5fSEND_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_DS_CS_UPDATE_DATA_SEND_descriptor_, &MSG_DS_CS_UPDATE_DATA_SEND::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_CS_DS_UPDATE_DATA_SEND_ACK_descriptor_, &MSG_CS_DS_UPDATE_DATA_SEND_ACK::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MSG_5fDS_5fCS_5fUPDATE_5fDATA_5fSEND_2eproto() {
  delete MSG_DS_CS_UPDATE_DATA_SEND::default_instance_;
  delete MSG_DS_CS_UPDATE_DATA_SEND_reflection_;
  delete MSG_CS_DS_UPDATE_DATA_SEND_ACK::default_instance_;
  delete MSG_CS_DS_UPDATE_DATA_SEND_ACK_reflection_;
}

void protobuf_AddDesc_MSG_5fDS_5fCS_5fUPDATE_5fDATA_5fSEND_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n MSG_DS_CS_UPDATE_DATA_SEND.proto\032\014comm"
    "on.proto\"\342\002\n\032MSG_DS_CS_UPDATE_DATA_SEND\022"
    "\016\n\006taskID\030\001 \002(\r\022\014\n\004dbID\030\002 \002(\r\022\021\n\ttableNa"
    "me\030\003 \002(\t\022\022\n\ncolumnName\030\004 \002(\t\0228\n\ncolumnTy"
    "pe\030\005 \002(\0162$.MSG_DS_CS_UPDATE_DATA_SEND.CO"
    "L_TYPE\022\035\n\010dicValue\030\006 \003(\0132\013.DICT_VALUE\022\024\n"
    "\014indexOffsets\030\007 \003(\r\022\024\n\014indexPosting\030\010 \003("
    "\r\022\017\n\007sliceNo\030\t \001(\r\022\020\n\010sliceNum\030\n \001(\r\"W\n\010"
    "COL_TYPE\022\013\n\007VARCHAR\020\000\022\013\n\007INTTYPE\020\001\022\016\n\nDO"
    "UBLETYPE\020\002\022\010\n\004TEXT\020\003\022\010\n\004BLOB\020\004\022\r\n\tTIMEST"
    "AMP\020\005\"\321\002\n\036MSG_CS_DS_UPDATE_DATA_SEND_ACK"
    "\022\014\n\004dbID\030\001 \002(\r\022\021\n\ttableName\030\002 \002(\t\022\022\n\ncol"
    "umnName\030\003 \002(\t\022<\n\ncolumnType\030\004 \002(\0162(.MSG_"
    "CS_DS_UPDATE_DATA_SEND_ACK.COL_TYPE\022\035\n\010d"
    "icValue\030\005 \003(\0132\013.DICT_VALUE\022\017\n\007xVector\030\006 "
    "\003(\r\022\016\n\006taskID\030\007 \002(\r\022\022\n\nstatusCode\030\010 \001(\005\022"
    "\017\n\007sliceNo\030\t \001(\r\"W\n\010COL_TYPE\022\013\n\007VARCHAR\020"
    "\000\022\013\n\007INTTYPE\020\001\022\016\n\nDOUBLETYPE\020\002\022\010\n\004TEXT\020\003"
    "\022\010\n\004BLOB\020\004\022\r\n\tTIMESTAMP\020\005", 745);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MSG_DS_CS_UPDATE_DATA_SEND.proto", &protobuf_RegisterTypes);
  MSG_DS_CS_UPDATE_DATA_SEND::default_instance_ = new MSG_DS_CS_UPDATE_DATA_SEND();
  MSG_CS_DS_UPDATE_DATA_SEND_ACK::default_instance_ = new MSG_CS_DS_UPDATE_DATA_SEND_ACK();
  MSG_DS_CS_UPDATE_DATA_SEND::default_instance_->InitAsDefaultInstance();
  MSG_CS_DS_UPDATE_DATA_SEND_ACK::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MSG_5fDS_5fCS_5fUPDATE_5fDATA_5fSEND_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MSG_5fDS_5fCS_5fUPDATE_5fDATA_5fSEND_2eproto {
  StaticDescriptorInitializer_MSG_5fDS_5fCS_5fUPDATE_5fDATA_5fSEND_2eproto() {
    protobuf_AddDesc_MSG_5fDS_5fCS_5fUPDATE_5fDATA_5fSEND_2eproto();
  }
} static_descriptor_initializer_MSG_5fDS_5fCS_5fUPDATE_5fDATA_5fSEND_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* MSG_DS_CS_UPDATE_DATA_SEND_COL_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DS_CS_UPDATE_DATA_SEND_COL_TYPE_descriptor_;
}
bool MSG_DS_CS_UPDATE_DATA_SEND_COL_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MSG_DS_CS_UPDATE_DATA_SEND_COL_TYPE MSG_DS_CS_UPDATE_DATA_SEND::VARCHAR;
const MSG_DS_CS_UPDATE_DATA_SEND_COL_TYPE MSG_DS_CS_UPDATE_DATA_SEND::INTTYPE;
const MSG_DS_CS_UPDATE_DATA_SEND_COL_TYPE MSG_DS_CS_UPDATE_DATA_SEND::DOUBLETYPE;
const MSG_DS_CS_UPDATE_DATA_SEND_COL_TYPE MSG_DS_CS_UPDATE_DATA_SEND::TEXT;
const MSG_DS_CS_UPDATE_DATA_SEND_COL_TYPE MSG_DS_CS_UPDATE_DATA_SEND::BLOB;
const MSG_DS_CS_UPDATE_DATA_SEND_COL_TYPE MSG_DS_CS_UPDATE_DATA_SEND::TIMESTAMP;
const MSG_DS_CS_UPDATE_DATA_SEND_COL_TYPE MSG_DS_CS_UPDATE_DATA_SEND::COL_TYPE_MIN;
const MSG_DS_CS_UPDATE_DATA_SEND_COL_TYPE MSG_DS_CS_UPDATE_DATA_SEND::COL_TYPE_MAX;
const int MSG_DS_CS_UPDATE_DATA_SEND::COL_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MSG_DS_CS_UPDATE_DATA_SEND::kTaskIDFieldNumber;
const int MSG_DS_CS_UPDATE_DATA_SEND::kDbIDFieldNumber;
const int MSG_DS_CS_UPDATE_DATA_SEND::kTableNameFieldNumber;
const int MSG_DS_CS_UPDATE_DATA_SEND::kColumnNameFieldNumber;
const int MSG_DS_CS_UPDATE_DATA_SEND::kColumnTypeFieldNumber;
const int MSG_DS_CS_UPDATE_DATA_SEND::kDicValueFieldNumber;
const int MSG_DS_CS_UPDATE_DATA_SEND::kIndexOffsetsFieldNumber;
const int MSG_DS_CS_UPDATE_DATA_SEND::kIndexPostingFieldNumber;
const int MSG_DS_CS_UPDATE_DATA_SEND::kSliceNoFieldNumber;
const int MSG_DS_CS_UPDATE_DATA_SEND::kSliceNumFieldNumber;
#endif  // !_MSC_VER

MSG_DS_CS_UPDATE_DATA_SEND::MSG_DS_CS_UPDATE_DATA_SEND()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_DS_CS_UPDATE_DATA_SEND::InitAsDefaultInstance() {
}

MSG_DS_CS_UPDATE_DATA_SEND::MSG_DS_CS_UPDATE_DATA_SEND(const MSG_DS_CS_UPDATE_DATA_SEND& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_DS_CS_UPDATE_DATA_SEND::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  dbid_ = 0u;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  columnname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  columntype_ = 0;
  sliceno_ = 0u;
  slicenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_DS_CS_UPDATE_DATA_SEND::~MSG_DS_CS_UPDATE_DATA_SEND() {
  SharedDtor();
}

void MSG_DS_CS_UPDATE_DATA_SEND::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (columnname_ != &::google::protobuf::internal::kEmptyString) {
    delete columnname_;
  }
  if (this != default_instance_) {
  }
}

void MSG_DS_CS_UPDATE_DATA_SEND::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_DS_CS_UPDATE_DATA_SEND::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DS_CS_UPDATE_DATA_SEND_descriptor_;
}

const MSG_DS_CS_UPDATE_DATA_SEND& MSG_DS_CS_UPDATE_DATA_SEND::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fDS_5fCS_5fUPDATE_5fDATA_5fSEND_2eproto();  return *default_instance_;
}

MSG_DS_CS_UPDATE_DATA_SEND* MSG_DS_CS_UPDATE_DATA_SEND::default_instance_ = NULL;

MSG_DS_CS_UPDATE_DATA_SEND* MSG_DS_CS_UPDATE_DATA_SEND::New() const {
  return new MSG_DS_CS_UPDATE_DATA_SEND;
}

void MSG_DS_CS_UPDATE_DATA_SEND::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    dbid_ = 0u;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    if (has_columnname()) {
      if (columnname_ != &::google::protobuf::internal::kEmptyString) {
        columnname_->clear();
      }
    }
    columntype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sliceno_ = 0u;
    slicenum_ = 0u;
  }
  dicvalue_.Clear();
  indexoffsets_.Clear();
  indexposting_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_DS_CS_UPDATE_DATA_SEND::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 taskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dbID;
        break;
      }
      
      // required uint32 dbID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dbID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dbid_)));
          set_has_dbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tableName;
        break;
      }
      
      // required string tableName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tableName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_columnName;
        break;
      }
      
      // required string columnName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_columnName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_columnname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->columnname().data(), this->columnname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_columnType;
        break;
      }
      
      // required .MSG_DS_CS_UPDATE_DATA_SEND.COL_TYPE columnType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_columnType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MSG_DS_CS_UPDATE_DATA_SEND_COL_TYPE_IsValid(value)) {
            set_columntype(static_cast< ::MSG_DS_CS_UPDATE_DATA_SEND_COL_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_dicValue;
        break;
      }
      
      // repeated .DICT_VALUE dicValue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dicValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dicvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_dicValue;
        if (input->ExpectTag(56)) goto parse_indexOffsets;
        break;
      }
      
      // repeated uint32 indexOffsets = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_indexOffsets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_indexoffsets())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_indexoffsets())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_indexOffsets;
        if (input->ExpectTag(64)) goto parse_indexPosting;
        break;
      }
      
      // repeated uint32 indexPosting = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_indexPosting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_indexposting())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_indexposting())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_indexPosting;
        if (input->ExpectTag(72)) goto parse_sliceNo;
        break;
      }
      
      // optional uint32 sliceNo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sliceNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sliceno_)));
          set_has_sliceno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_sliceNum;
        break;
      }
      
      // optional uint32 sliceNum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sliceNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slicenum_)));
          set_has_slicenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_DS_CS_UPDATE_DATA_SEND::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }
  
  // required uint32 dbID = 2;
  if (has_dbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dbid(), output);
  }
  
  // required string tableName = 3;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tablename(), output);
  }
  
  // required string columnName = 4;
  if (has_columnname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->columnname().data(), this->columnname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->columnname(), output);
  }
  
  // required .MSG_DS_CS_UPDATE_DATA_SEND.COL_TYPE columnType = 5;
  if (has_columntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->columntype(), output);
  }
  
  // repeated .DICT_VALUE dicValue = 6;
  for (int i = 0; i < this->dicvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->dicvalue(i), output);
  }
  
  // repeated uint32 indexOffsets = 7;
  for (int i = 0; i < this->indexoffsets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->indexoffsets(i), output);
  }
  
  // repeated uint32 indexPosting = 8;
  for (int i = 0; i < this->indexposting_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->indexposting(i), output);
  }
  
  // optional uint32 sliceNo = 9;
  if (has_sliceno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sliceno(), output);
  }
  
  // optional uint32 sliceNum = 10;
  if (has_slicenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->slicenum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_DS_CS_UPDATE_DATA_SEND::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }
  
  // required uint32 dbID = 2;
  if (has_dbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dbid(), target);
  }
  
  // required string tableName = 3;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tablename(), target);
  }
  
  // required string columnName = 4;
  if (has_columnname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->columnname().data(), this->columnname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->columnname(), target);
  }
  
  // required .MSG_DS_CS_UPDATE_DATA_SEND.COL_TYPE columnType = 5;
  if (has_columntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->columntype(), target);
  }
  
  // repeated .DICT_VALUE dicValue = 6;
  for (int i = 0; i < this->dicvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->dicvalue(i), target);
  }
  
  // repeated uint32 indexOffsets = 7;
  for (int i = 0; i < this->indexoffsets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->indexoffsets(i), target);
  }
  
  // repeated uint32 indexPosting = 8;
  for (int i = 0; i < this->indexposting_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->indexposting(i), target);
  }
  
  // optional uint32 sliceNo = 9;
  if (has_sliceno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sliceno(), target);
  }
  
  // optional uint32 sliceNum = 10;
  if (has_slicenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->slicenum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_DS_CS_UPDATE_DATA_SEND::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }
    
    // required uint32 dbID = 2;
    if (has_dbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dbid());
    }
    
    // required string tableName = 3;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }
    
    // required string columnName = 4;
    if (has_columnname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->columnname());
    }
    
    // required .MSG_DS_CS_UPDATE_DATA_SEND.COL_TYPE columnType = 5;
    if (has_columntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->columntype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 sliceNo = 9;
    if (has_sliceno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sliceno());
    }
    
    // optional uint32 sliceNum = 10;
    if (has_slicenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slicenum());
    }
    
  }
  // repeated .DICT_VALUE dicValue = 6;
  total_size += 1 * this->dicvalue_size();
  for (int i = 0; i < this->dicvalue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dicvalue(i));
  }
  
  // repeated uint32 indexOffsets = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->indexoffsets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->indexoffsets(i));
    }
    total_size += 1 * this->indexoffsets_size() + data_size;
  }
  
  // repeated uint32 indexPosting = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->indexposting_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->indexposting(i));
    }
    total_size += 1 * this->indexposting_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_DS_CS_UPDATE_DATA_SEND::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_DS_CS_UPDATE_DATA_SEND* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_DS_CS_UPDATE_DATA_SEND*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_DS_CS_UPDATE_DATA_SEND::MergeFrom(const MSG_DS_CS_UPDATE_DATA_SEND& from) {
  GOOGLE_CHECK_NE(&from, this);
  dicvalue_.MergeFrom(from.dicvalue_);
  indexoffsets_.MergeFrom(from.indexoffsets_);
  indexposting_.MergeFrom(from.indexposting_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_dbid()) {
      set_dbid(from.dbid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_columnname()) {
      set_columnname(from.columnname());
    }
    if (from.has_columntype()) {
      set_columntype(from.columntype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sliceno()) {
      set_sliceno(from.sliceno());
    }
    if (from.has_slicenum()) {
      set_slicenum(from.slicenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_DS_CS_UPDATE_DATA_SEND::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DS_CS_UPDATE_DATA_SEND::CopyFrom(const MSG_DS_CS_UPDATE_DATA_SEND& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DS_CS_UPDATE_DATA_SEND::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void MSG_DS_CS_UPDATE_DATA_SEND::Swap(MSG_DS_CS_UPDATE_DATA_SEND* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(dbid_, other->dbid_);
    std::swap(tablename_, other->tablename_);
    std::swap(columnname_, other->columnname_);
    std::swap(columntype_, other->columntype_);
    dicvalue_.Swap(&other->dicvalue_);
    indexoffsets_.Swap(&other->indexoffsets_);
    indexposting_.Swap(&other->indexposting_);
    std::swap(sliceno_, other->sliceno_);
    std::swap(slicenum_, other->slicenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_DS_CS_UPDATE_DATA_SEND::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_DS_CS_UPDATE_DATA_SEND_descriptor_;
  metadata.reflection = MSG_DS_CS_UPDATE_DATA_SEND_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MSG_CS_DS_UPDATE_DATA_SEND_ACK_COL_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_CS_DS_UPDATE_DATA_SEND_ACK_COL_TYPE_descriptor_;
}
bool MSG_CS_DS_UPDATE_DATA_SEND_ACK_COL_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MSG_CS_DS_UPDATE_DATA_SEND_ACK_COL_TYPE MSG_CS_DS_UPDATE_DATA_SEND_ACK::VARCHAR;
const MSG_CS_DS_UPDATE_DATA_SEND_ACK_COL_TYPE MSG_CS_DS_UPDATE_DATA_SEND_ACK::INTTYPE;
const MSG_CS_DS_UPDATE_DATA_SEND_ACK_COL_TYPE MSG_CS_DS_UPDATE_DATA_SEND_ACK::DOUBLETYPE;
const MSG_CS_DS_UPDATE_DATA_SEND_ACK_COL_TYPE MSG_CS_DS_UPDATE_DATA_SEND_ACK::TEXT;
const MSG_CS_DS_UPDATE_DATA_SEND_ACK_COL_TYPE MSG_CS_DS_UPDATE_DATA_SEND_ACK::BLOB;
const MSG_CS_DS_UPDATE_DATA_SEND_ACK_COL_TYPE MSG_CS_DS_UPDATE_DATA_SEND_ACK::TIMESTAMP;
const MSG_CS_DS_UPDATE_DATA_SEND_ACK_COL_TYPE MSG_CS_DS_UPDATE_DATA_SEND_ACK::COL_TYPE_MIN;
const MSG_CS_DS_UPDATE_DATA_SEND_ACK_COL_TYPE MSG_CS_DS_UPDATE_DATA_SEND_ACK::COL_TYPE_MAX;
const int MSG_CS_DS_UPDATE_DATA_SEND_ACK::COL_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MSG_CS_DS_UPDATE_DATA_SEND_ACK::kDbIDFieldNumber;
const int MSG_CS_DS_UPDATE_DATA_SEND_ACK::kTableNameFieldNumber;
const int MSG_CS_DS_UPDATE_DATA_SEND_ACK::kColumnNameFieldNumber;
const int MSG_CS_DS_UPDATE_DATA_SEND_ACK::kColumnTypeFieldNumber;
const int MSG_CS_DS_UPDATE_DATA_SEND_ACK::kDicValueFieldNumber;
const int MSG_CS_DS_UPDATE_DATA_SEND_ACK::kXVectorFieldNumber;
const int MSG_CS_DS_UPDATE_DATA_SEND_ACK::kTaskIDFieldNumber;
const int MSG_CS_DS_UPDATE_DATA_SEND_ACK::kStatusCodeFieldNumber;
const int MSG_CS_DS_UPDATE_DATA_SEND_ACK::kSliceNoFieldNumber;
#endif  // !_MSC_VER

MSG_CS_DS_UPDATE_DATA_SEND_ACK::MSG_CS_DS_UPDATE_DATA_SEND_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSG_CS_DS_UPDATE_DATA_SEND_ACK::InitAsDefaultInstance() {
}

MSG_CS_DS_UPDATE_DATA_SEND_ACK::MSG_CS_DS_UPDATE_DATA_SEND_ACK(const MSG_CS_DS_UPDATE_DATA_SEND_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSG_CS_DS_UPDATE_DATA_SEND_ACK::SharedCtor() {
  _cached_size_ = 0;
  dbid_ = 0u;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  columnname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  columntype_ = 0;
  taskid_ = 0u;
  statuscode_ = 0;
  sliceno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_CS_DS_UPDATE_DATA_SEND_ACK::~MSG_CS_DS_UPDATE_DATA_SEND_ACK() {
  SharedDtor();
}

void MSG_CS_DS_UPDATE_DATA_SEND_ACK::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (columnname_ != &::google::protobuf::internal::kEmptyString) {
    delete columnname_;
  }
  if (this != default_instance_) {
  }
}

void MSG_CS_DS_UPDATE_DATA_SEND_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_CS_DS_UPDATE_DATA_SEND_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_CS_DS_UPDATE_DATA_SEND_ACK_descriptor_;
}

const MSG_CS_DS_UPDATE_DATA_SEND_ACK& MSG_CS_DS_UPDATE_DATA_SEND_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fDS_5fCS_5fUPDATE_5fDATA_5fSEND_2eproto();  return *default_instance_;
}

MSG_CS_DS_UPDATE_DATA_SEND_ACK* MSG_CS_DS_UPDATE_DATA_SEND_ACK::default_instance_ = NULL;

MSG_CS_DS_UPDATE_DATA_SEND_ACK* MSG_CS_DS_UPDATE_DATA_SEND_ACK::New() const {
  return new MSG_CS_DS_UPDATE_DATA_SEND_ACK;
}

void MSG_CS_DS_UPDATE_DATA_SEND_ACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dbid_ = 0u;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    if (has_columnname()) {
      if (columnname_ != &::google::protobuf::internal::kEmptyString) {
        columnname_->clear();
      }
    }
    columntype_ = 0;
    taskid_ = 0u;
    statuscode_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sliceno_ = 0u;
  }
  dicvalue_.Clear();
  xvector_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_CS_DS_UPDATE_DATA_SEND_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dbID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dbid_)));
          set_has_dbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tableName;
        break;
      }
      
      // required string tableName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tableName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_columnName;
        break;
      }
      
      // required string columnName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_columnName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_columnname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->columnname().data(), this->columnname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_columnType;
        break;
      }
      
      // required .MSG_CS_DS_UPDATE_DATA_SEND_ACK.COL_TYPE columnType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_columnType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MSG_CS_DS_UPDATE_DATA_SEND_ACK_COL_TYPE_IsValid(value)) {
            set_columntype(static_cast< ::MSG_CS_DS_UPDATE_DATA_SEND_ACK_COL_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dicValue;
        break;
      }
      
      // repeated .DICT_VALUE dicValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dicValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dicvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dicValue;
        if (input->ExpectTag(48)) goto parse_xVector;
        break;
      }
      
      // repeated uint32 xVector = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xVector:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_xvector())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_xvector())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_xVector;
        if (input->ExpectTag(56)) goto parse_taskID;
        break;
      }
      
      // required uint32 taskID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_statusCode;
        break;
      }
      
      // optional int32 statusCode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_statusCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sliceNo;
        break;
      }
      
      // optional uint32 sliceNo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sliceNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sliceno_)));
          set_has_sliceno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSG_CS_DS_UPDATE_DATA_SEND_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dbID = 1;
  if (has_dbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dbid(), output);
  }
  
  // required string tableName = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tablename(), output);
  }
  
  // required string columnName = 3;
  if (has_columnname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->columnname().data(), this->columnname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->columnname(), output);
  }
  
  // required .MSG_CS_DS_UPDATE_DATA_SEND_ACK.COL_TYPE columnType = 4;
  if (has_columntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->columntype(), output);
  }
  
  // repeated .DICT_VALUE dicValue = 5;
  for (int i = 0; i < this->dicvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dicvalue(i), output);
  }
  
  // repeated uint32 xVector = 6;
  for (int i = 0; i < this->xvector_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->xvector(i), output);
  }
  
  // required uint32 taskID = 7;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->taskid(), output);
  }
  
  // optional int32 statusCode = 8;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->statuscode(), output);
  }
  
  // optional uint32 sliceNo = 9;
  if (has_sliceno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sliceno(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSG_CS_DS_UPDATE_DATA_SEND_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dbID = 1;
  if (has_dbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dbid(), target);
  }
  
  // required string tableName = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tablename(), target);
  }
  
  // required string columnName = 3;
  if (has_columnname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->columnname().data(), this->columnname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->columnname(), target);
  }
  
  // required .MSG_CS_DS_UPDATE_DATA_SEND_ACK.COL_TYPE columnType = 4;
  if (has_columntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->columntype(), target);
  }
  
  // repeated .DICT_VALUE dicValue = 5;
  for (int i = 0; i < this->dicvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dicvalue(i), target);
  }
  
  // repeated uint32 xVector = 6;
  for (int i = 0; i < this->xvector_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->xvector(i), target);
  }
  
  // required uint32 taskID = 7;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->taskid(), target);
  }
  
  // optional int32 statusCode = 8;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->statuscode(), target);
  }
  
  // optional uint32 sliceNo = 9;
  if (has_sliceno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sliceno(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSG_CS_DS_UPDATE_DATA_SEND_ACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dbID = 1;
    if (has_dbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dbid());
    }
    
    // required string tableName = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }
    
    // required string columnName = 3;
    if (has_columnname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->columnname());
    }
    
    // required .MSG_CS_DS_UPDATE_DATA_SEND_ACK.COL_TYPE columnType = 4;
    if (has_columntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->columntype());
    }
    
    // required uint32 taskID = 7;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }
    
    // optional int32 statusCode = 8;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 sliceNo = 9;
    if (has_sliceno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sliceno());
    }
    
  }
  // repeated .DICT_VALUE dicValue = 5;
  total_size += 1 * this->dicvalue_size();
  for (int i = 0; i < this->dicvalue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dicvalue(i));
  }
  
  // repeated uint32 xVector = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->xvector_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->xvector(i));
    }
    total_size += 1 * this->xvector_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_CS_DS_UPDATE_DATA_SEND_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_CS_DS_UPDATE_DATA_SEND_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_CS_DS_UPDATE_DATA_SEND_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_CS_DS_UPDATE_DATA_SEND_ACK::MergeFrom(const MSG_CS_DS_UPDATE_DATA_SEND_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  dicvalue_.MergeFrom(from.dicvalue_);
  xvector_.MergeFrom(from.xvector_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dbid()) {
      set_dbid(from.dbid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_columnname()) {
      set_columnname(from.columnname());
    }
    if (from.has_columntype()) {
      set_columntype(from.columntype());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sliceno()) {
      set_sliceno(from.sliceno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_CS_DS_UPDATE_DATA_SEND_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_CS_DS_UPDATE_DATA_SEND_ACK::CopyFrom(const MSG_CS_DS_UPDATE_DATA_SEND_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_CS_DS_UPDATE_DATA_SEND_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000004f) != 0x0000004f) return false;
  
  return true;
}

void MSG_CS_DS_UPDATE_DATA_SEND_ACK::Swap(MSG_CS_DS_UPDATE_DATA_SEND_ACK* other) {
  if (other != this) {
    std::swap(dbid_, other->dbid_);
    std::swap(tablename_, other->tablename_);
    std::swap(columnname_, other->columnname_);
    std::swap(columntype_, other->columntype_);
    dicvalue_.Swap(&other->dicvalue_);
    xvector_.Swap(&other->xvector_);
    std::swap(taskid_, other->taskid_);
    std::swap(statuscode_, other->statuscode_);
    std::swap(sliceno_, other->sliceno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_CS_DS_UPDATE_DATA_SEND_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_CS_DS_UPDATE_DATA_SEND_ACK_descriptor_;
  metadata.reflection = MSG_CS_DS_UPDATE_DATA_SEND_ACK_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
