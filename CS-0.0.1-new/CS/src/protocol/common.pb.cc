// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SINGLE_NODE_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SINGLE_NODE_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* COLUMN_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  COLUMN_INFO_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* COLUMN_INFO_ColumnType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TB_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TB_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* DATABASE_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DATABASE_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* TASK_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TASK_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* GROUP_DB_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GROUP_DB_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ROWKEY_ENTRY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ROWKEY_ENTRY_reflection_ = NULL;
const ::google::protobuf::Descriptor* DICT_VALUE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DICT_VALUE_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2eproto() {
  protobuf_AddDesc_common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common.proto");
  GOOGLE_CHECK(file != NULL);
  SINGLE_NODE_INFO_descriptor_ = file->message_type(0);
  static const int SINGLE_NODE_INFO_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SINGLE_NODE_INFO, nodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SINGLE_NODE_INFO, nodestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SINGLE_NODE_INFO, nodeip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SINGLE_NODE_INFO, nodeport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SINGLE_NODE_INFO, core_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SINGLE_NODE_INFO, memsize_),
  };
  SINGLE_NODE_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SINGLE_NODE_INFO_descriptor_,
      SINGLE_NODE_INFO::default_instance_,
      SINGLE_NODE_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SINGLE_NODE_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SINGLE_NODE_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SINGLE_NODE_INFO));
  COLUMN_INFO_descriptor_ = file->message_type(1);
  static const int COLUMN_INFO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COLUMN_INFO, columnname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COLUMN_INFO, columntype_),
  };
  COLUMN_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      COLUMN_INFO_descriptor_,
      COLUMN_INFO::default_instance_,
      COLUMN_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COLUMN_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COLUMN_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(COLUMN_INFO));
  COLUMN_INFO_ColumnType_descriptor_ = COLUMN_INFO_descriptor_->enum_type(0);
  TB_INFO_descriptor_ = file->message_type(2);
  static const int TB_INFO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TB_INFO, tbname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TB_INFO, columninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TB_INFO, rownum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TB_INFO, tbsize_),
  };
  TB_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TB_INFO_descriptor_,
      TB_INFO::default_instance_,
      TB_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TB_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TB_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TB_INFO));
  DATABASE_INFO_descriptor_ = file->message_type(3);
  static const int DATABASE_INFO_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DATABASE_INFO, dbname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DATABASE_INFO, dbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DATABASE_INFO, tbinfo_),
  };
  DATABASE_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DATABASE_INFO_descriptor_,
      DATABASE_INFO::default_instance_,
      DATABASE_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DATABASE_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DATABASE_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DATABASE_INFO));
  TASK_INFO_descriptor_ = file->message_type(4);
  static const int TASK_INFO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TASK_INFO, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TASK_INFO, schedule_),
  };
  TASK_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TASK_INFO_descriptor_,
      TASK_INFO::default_instance_,
      TASK_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TASK_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TASK_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TASK_INFO));
  GROUP_DB_INFO_descriptor_ = file->message_type(5);
  static const int GROUP_DB_INFO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GROUP_DB_INFO, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GROUP_DB_INFO, dbid_),
  };
  GROUP_DB_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GROUP_DB_INFO_descriptor_,
      GROUP_DB_INFO::default_instance_,
      GROUP_DB_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GROUP_DB_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GROUP_DB_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GROUP_DB_INFO));
  ROWKEY_ENTRY_descriptor_ = file->message_type(6);
  static const int ROWKEY_ENTRY_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROWKEY_ENTRY, rowkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROWKEY_ENTRY, entry_),
  };
  ROWKEY_ENTRY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ROWKEY_ENTRY_descriptor_,
      ROWKEY_ENTRY::default_instance_,
      ROWKEY_ENTRY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROWKEY_ENTRY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROWKEY_ENTRY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ROWKEY_ENTRY));
  DICT_VALUE_descriptor_ = file->message_type(7);
  static const int DICT_VALUE_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DICT_VALUE, strvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DICT_VALUE, ivalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DICT_VALUE, dvalue_),
  };
  DICT_VALUE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DICT_VALUE_descriptor_,
      DICT_VALUE::default_instance_,
      DICT_VALUE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DICT_VALUE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DICT_VALUE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DICT_VALUE));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SINGLE_NODE_INFO_descriptor_, &SINGLE_NODE_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    COLUMN_INFO_descriptor_, &COLUMN_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TB_INFO_descriptor_, &TB_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DATABASE_INFO_descriptor_, &DATABASE_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TASK_INFO_descriptor_, &TASK_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GROUP_DB_INFO_descriptor_, &GROUP_DB_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ROWKEY_ENTRY_descriptor_, &ROWKEY_ENTRY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DICT_VALUE_descriptor_, &DICT_VALUE::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2eproto() {
  delete SINGLE_NODE_INFO::default_instance_;
  delete SINGLE_NODE_INFO_reflection_;
  delete COLUMN_INFO::default_instance_;
  delete COLUMN_INFO_reflection_;
  delete TB_INFO::default_instance_;
  delete TB_INFO_reflection_;
  delete DATABASE_INFO::default_instance_;
  delete DATABASE_INFO_reflection_;
  delete TASK_INFO::default_instance_;
  delete TASK_INFO_reflection_;
  delete GROUP_DB_INFO::default_instance_;
  delete GROUP_DB_INFO_reflection_;
  delete ROWKEY_ENTRY::default_instance_;
  delete ROWKEY_ENTRY_reflection_;
  delete DICT_VALUE::default_instance_;
  delete DICT_VALUE_reflection_;
}

void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014common.proto\"w\n\020SINGLE_NODE_INFO\022\016\n\006no"
    "deId\030\001 \002(\r\022\022\n\nnodeStatus\030\002 \001(\t\022\016\n\006nodeIp"
    "\030\003 \001(\t\022\020\n\010nodePort\030\004 \001(\r\022\014\n\004core\030\005 \001(\r\022\017"
    "\n\007memSize\030\006 \001(\r\"\251\001\n\013COLUMN_INFO\022\022\n\ncolum"
    "nName\030\001 \002(\t\022+\n\ncolumnType\030\002 \002(\0162\027.COLUMN"
    "_INFO.ColumnType\"Y\n\nColumnType\022\013\n\007VARCHA"
    "R\020\000\022\013\n\007INTTYPE\020\001\022\016\n\nDOUBLETYPE\020\002\022\010\n\004TEXT"
    "\020\003\022\010\n\004BLOB\020\004\022\r\n\tTIMESTAMP\020\005\"[\n\007TB_INFO\022\016"
    "\n\006tbName\030\001 \002(\t\022 \n\ncolumnInfo\030\002 \003(\0132\014.COL"
    "UMN_INFO\022\016\n\006rowNum\030\003 \002(\r\022\016\n\006tbSize\030\004 \002(\r"
    "\"G\n\rDATABASE_INFO\022\016\n\006dbName\030\001 \002(\t\022\014\n\004dbi"
    "d\030\002 \002(\005\022\030\n\006tbInfo\030\003 \003(\0132\010.TB_INFO\"/\n\tTAS"
    "K_INFO\022\020\n\010taskType\030\001 \002(\r\022\020\n\010schedule\030\002 \002"
    "(\r\"0\n\rGROUP_DB_INFO\022\021\n\tgroupName\030\001 \002(\t\022\014"
    "\n\004dbid\030\002 \003(\r\"-\n\014ROWKEY_ENTRY\022\016\n\006rowKey\030\001"
    " \001(\004\022\r\n\005entry\030\002 \002(\004\">\n\nDICT_VALUE\022\020\n\010str"
    "Value\030\001 \001(\t\022\016\n\006iValue\030\002 \001(\005\022\016\n\006dValue\030\003 "
    "\001(\001", 683);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  SINGLE_NODE_INFO::default_instance_ = new SINGLE_NODE_INFO();
  COLUMN_INFO::default_instance_ = new COLUMN_INFO();
  TB_INFO::default_instance_ = new TB_INFO();
  DATABASE_INFO::default_instance_ = new DATABASE_INFO();
  TASK_INFO::default_instance_ = new TASK_INFO();
  GROUP_DB_INFO::default_instance_ = new GROUP_DB_INFO();
  ROWKEY_ENTRY::default_instance_ = new ROWKEY_ENTRY();
  DICT_VALUE::default_instance_ = new DICT_VALUE();
  SINGLE_NODE_INFO::default_instance_->InitAsDefaultInstance();
  COLUMN_INFO::default_instance_->InitAsDefaultInstance();
  TB_INFO::default_instance_->InitAsDefaultInstance();
  DATABASE_INFO::default_instance_->InitAsDefaultInstance();
  TASK_INFO::default_instance_->InitAsDefaultInstance();
  GROUP_DB_INFO::default_instance_->InitAsDefaultInstance();
  ROWKEY_ENTRY::default_instance_->InitAsDefaultInstance();
  DICT_VALUE::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SINGLE_NODE_INFO::kNodeIdFieldNumber;
const int SINGLE_NODE_INFO::kNodeStatusFieldNumber;
const int SINGLE_NODE_INFO::kNodeIpFieldNumber;
const int SINGLE_NODE_INFO::kNodePortFieldNumber;
const int SINGLE_NODE_INFO::kCoreFieldNumber;
const int SINGLE_NODE_INFO::kMemSizeFieldNumber;
#endif  // !_MSC_VER

SINGLE_NODE_INFO::SINGLE_NODE_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SINGLE_NODE_INFO::InitAsDefaultInstance() {
}

SINGLE_NODE_INFO::SINGLE_NODE_INFO(const SINGLE_NODE_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SINGLE_NODE_INFO::SharedCtor() {
  _cached_size_ = 0;
  nodeid_ = 0u;
  nodestatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nodeip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nodeport_ = 0u;
  core_ = 0u;
  memsize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SINGLE_NODE_INFO::~SINGLE_NODE_INFO() {
  SharedDtor();
}

void SINGLE_NODE_INFO::SharedDtor() {
  if (nodestatus_ != &::google::protobuf::internal::kEmptyString) {
    delete nodestatus_;
  }
  if (nodeip_ != &::google::protobuf::internal::kEmptyString) {
    delete nodeip_;
  }
  if (this != default_instance_) {
  }
}

void SINGLE_NODE_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SINGLE_NODE_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SINGLE_NODE_INFO_descriptor_;
}

const SINGLE_NODE_INFO& SINGLE_NODE_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();  return *default_instance_;
}

SINGLE_NODE_INFO* SINGLE_NODE_INFO::default_instance_ = NULL;

SINGLE_NODE_INFO* SINGLE_NODE_INFO::New() const {
  return new SINGLE_NODE_INFO;
}

void SINGLE_NODE_INFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nodeid_ = 0u;
    if (has_nodestatus()) {
      if (nodestatus_ != &::google::protobuf::internal::kEmptyString) {
        nodestatus_->clear();
      }
    }
    if (has_nodeip()) {
      if (nodeip_ != &::google::protobuf::internal::kEmptyString) {
        nodeip_->clear();
      }
    }
    nodeport_ = 0u;
    core_ = 0u;
    memsize_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SINGLE_NODE_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nodeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nodeid_)));
          set_has_nodeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodeStatus;
        break;
      }
      
      // optional string nodeStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodeStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodestatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodestatus().data(), this->nodestatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nodeIp;
        break;
      }
      
      // optional string nodeIp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodeIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodeip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodeip().data(), this->nodeip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nodePort;
        break;
      }
      
      // optional uint32 nodePort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nodePort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nodeport_)));
          set_has_nodeport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_core;
        break;
      }
      
      // optional uint32 core = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_core:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &core_)));
          set_has_core();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_memSize;
        break;
      }
      
      // optional uint32 memSize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memsize_)));
          set_has_memsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SINGLE_NODE_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nodeId = 1;
  if (has_nodeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nodeid(), output);
  }
  
  // optional string nodeStatus = 2;
  if (has_nodestatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodestatus().data(), this->nodestatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nodestatus(), output);
  }
  
  // optional string nodeIp = 3;
  if (has_nodeip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeip().data(), this->nodeip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nodeip(), output);
  }
  
  // optional uint32 nodePort = 4;
  if (has_nodeport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nodeport(), output);
  }
  
  // optional uint32 core = 5;
  if (has_core()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->core(), output);
  }
  
  // optional uint32 memSize = 6;
  if (has_memsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->memsize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SINGLE_NODE_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nodeId = 1;
  if (has_nodeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nodeid(), target);
  }
  
  // optional string nodeStatus = 2;
  if (has_nodestatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodestatus().data(), this->nodestatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nodestatus(), target);
  }
  
  // optional string nodeIp = 3;
  if (has_nodeip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeip().data(), this->nodeip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nodeip(), target);
  }
  
  // optional uint32 nodePort = 4;
  if (has_nodeport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->nodeport(), target);
  }
  
  // optional uint32 core = 5;
  if (has_core()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->core(), target);
  }
  
  // optional uint32 memSize = 6;
  if (has_memsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->memsize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SINGLE_NODE_INFO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nodeId = 1;
    if (has_nodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nodeid());
    }
    
    // optional string nodeStatus = 2;
    if (has_nodestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodestatus());
    }
    
    // optional string nodeIp = 3;
    if (has_nodeip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodeip());
    }
    
    // optional uint32 nodePort = 4;
    if (has_nodeport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nodeport());
    }
    
    // optional uint32 core = 5;
    if (has_core()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->core());
    }
    
    // optional uint32 memSize = 6;
    if (has_memsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memsize());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SINGLE_NODE_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SINGLE_NODE_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SINGLE_NODE_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SINGLE_NODE_INFO::MergeFrom(const SINGLE_NODE_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nodeid()) {
      set_nodeid(from.nodeid());
    }
    if (from.has_nodestatus()) {
      set_nodestatus(from.nodestatus());
    }
    if (from.has_nodeip()) {
      set_nodeip(from.nodeip());
    }
    if (from.has_nodeport()) {
      set_nodeport(from.nodeport());
    }
    if (from.has_core()) {
      set_core(from.core());
    }
    if (from.has_memsize()) {
      set_memsize(from.memsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SINGLE_NODE_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SINGLE_NODE_INFO::CopyFrom(const SINGLE_NODE_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SINGLE_NODE_INFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SINGLE_NODE_INFO::Swap(SINGLE_NODE_INFO* other) {
  if (other != this) {
    std::swap(nodeid_, other->nodeid_);
    std::swap(nodestatus_, other->nodestatus_);
    std::swap(nodeip_, other->nodeip_);
    std::swap(nodeport_, other->nodeport_);
    std::swap(core_, other->core_);
    std::swap(memsize_, other->memsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SINGLE_NODE_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SINGLE_NODE_INFO_descriptor_;
  metadata.reflection = SINGLE_NODE_INFO_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* COLUMN_INFO_ColumnType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return COLUMN_INFO_ColumnType_descriptor_;
}
bool COLUMN_INFO_ColumnType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const COLUMN_INFO_ColumnType COLUMN_INFO::VARCHAR;
const COLUMN_INFO_ColumnType COLUMN_INFO::INTTYPE;
const COLUMN_INFO_ColumnType COLUMN_INFO::DOUBLETYPE;
const COLUMN_INFO_ColumnType COLUMN_INFO::TEXT;
const COLUMN_INFO_ColumnType COLUMN_INFO::BLOB;
const COLUMN_INFO_ColumnType COLUMN_INFO::TIMESTAMP;
const COLUMN_INFO_ColumnType COLUMN_INFO::ColumnType_MIN;
const COLUMN_INFO_ColumnType COLUMN_INFO::ColumnType_MAX;
const int COLUMN_INFO::ColumnType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int COLUMN_INFO::kColumnNameFieldNumber;
const int COLUMN_INFO::kColumnTypeFieldNumber;
#endif  // !_MSC_VER

COLUMN_INFO::COLUMN_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void COLUMN_INFO::InitAsDefaultInstance() {
}

COLUMN_INFO::COLUMN_INFO(const COLUMN_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void COLUMN_INFO::SharedCtor() {
  _cached_size_ = 0;
  columnname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  columntype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

COLUMN_INFO::~COLUMN_INFO() {
  SharedDtor();
}

void COLUMN_INFO::SharedDtor() {
  if (columnname_ != &::google::protobuf::internal::kEmptyString) {
    delete columnname_;
  }
  if (this != default_instance_) {
  }
}

void COLUMN_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* COLUMN_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return COLUMN_INFO_descriptor_;
}

const COLUMN_INFO& COLUMN_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();  return *default_instance_;
}

COLUMN_INFO* COLUMN_INFO::default_instance_ = NULL;

COLUMN_INFO* COLUMN_INFO::New() const {
  return new COLUMN_INFO;
}

void COLUMN_INFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_columnname()) {
      if (columnname_ != &::google::protobuf::internal::kEmptyString) {
        columnname_->clear();
      }
    }
    columntype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool COLUMN_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string columnName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_columnname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->columnname().data(), this->columnname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_columnType;
        break;
      }
      
      // required .COLUMN_INFO.ColumnType columnType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_columnType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COLUMN_INFO_ColumnType_IsValid(value)) {
            set_columntype(static_cast< ::COLUMN_INFO_ColumnType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void COLUMN_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string columnName = 1;
  if (has_columnname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->columnname().data(), this->columnname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->columnname(), output);
  }
  
  // required .COLUMN_INFO.ColumnType columnType = 2;
  if (has_columntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->columntype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* COLUMN_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string columnName = 1;
  if (has_columnname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->columnname().data(), this->columnname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->columnname(), target);
  }
  
  // required .COLUMN_INFO.ColumnType columnType = 2;
  if (has_columntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->columntype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int COLUMN_INFO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string columnName = 1;
    if (has_columnname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->columnname());
    }
    
    // required .COLUMN_INFO.ColumnType columnType = 2;
    if (has_columntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->columntype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COLUMN_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const COLUMN_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const COLUMN_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void COLUMN_INFO::MergeFrom(const COLUMN_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_columnname()) {
      set_columnname(from.columnname());
    }
    if (from.has_columntype()) {
      set_columntype(from.columntype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void COLUMN_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COLUMN_INFO::CopyFrom(const COLUMN_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COLUMN_INFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void COLUMN_INFO::Swap(COLUMN_INFO* other) {
  if (other != this) {
    std::swap(columnname_, other->columnname_);
    std::swap(columntype_, other->columntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata COLUMN_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = COLUMN_INFO_descriptor_;
  metadata.reflection = COLUMN_INFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TB_INFO::kTbNameFieldNumber;
const int TB_INFO::kColumnInfoFieldNumber;
const int TB_INFO::kRowNumFieldNumber;
const int TB_INFO::kTbSizeFieldNumber;
#endif  // !_MSC_VER

TB_INFO::TB_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TB_INFO::InitAsDefaultInstance() {
}

TB_INFO::TB_INFO(const TB_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TB_INFO::SharedCtor() {
  _cached_size_ = 0;
  tbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rownum_ = 0u;
  tbsize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TB_INFO::~TB_INFO() {
  SharedDtor();
}

void TB_INFO::SharedDtor() {
  if (tbname_ != &::google::protobuf::internal::kEmptyString) {
    delete tbname_;
  }
  if (this != default_instance_) {
  }
}

void TB_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TB_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TB_INFO_descriptor_;
}

const TB_INFO& TB_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();  return *default_instance_;
}

TB_INFO* TB_INFO::default_instance_ = NULL;

TB_INFO* TB_INFO::New() const {
  return new TB_INFO;
}

void TB_INFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tbname()) {
      if (tbname_ != &::google::protobuf::internal::kEmptyString) {
        tbname_->clear();
      }
    }
    rownum_ = 0u;
    tbsize_ = 0u;
  }
  columninfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TB_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tbName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tbname().data(), this->tbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_columnInfo;
        break;
      }
      
      // repeated .COLUMN_INFO columnInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_columnInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_columnInfo;
        if (input->ExpectTag(24)) goto parse_rowNum;
        break;
      }
      
      // required uint32 rowNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rowNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rownum_)));
          set_has_rownum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tbSize;
        break;
      }
      
      // required uint32 tbSize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tbSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tbsize_)));
          set_has_tbsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TB_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string tbName = 1;
  if (has_tbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tbname().data(), this->tbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tbname(), output);
  }
  
  // repeated .COLUMN_INFO columnInfo = 2;
  for (int i = 0; i < this->columninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->columninfo(i), output);
  }
  
  // required uint32 rowNum = 3;
  if (has_rownum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rownum(), output);
  }
  
  // required uint32 tbSize = 4;
  if (has_tbsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tbsize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TB_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string tbName = 1;
  if (has_tbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tbname().data(), this->tbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tbname(), target);
  }
  
  // repeated .COLUMN_INFO columnInfo = 2;
  for (int i = 0; i < this->columninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->columninfo(i), target);
  }
  
  // required uint32 rowNum = 3;
  if (has_rownum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rownum(), target);
  }
  
  // required uint32 tbSize = 4;
  if (has_tbsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tbsize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TB_INFO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string tbName = 1;
    if (has_tbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tbname());
    }
    
    // required uint32 rowNum = 3;
    if (has_rownum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rownum());
    }
    
    // required uint32 tbSize = 4;
    if (has_tbsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tbsize());
    }
    
  }
  // repeated .COLUMN_INFO columnInfo = 2;
  total_size += 1 * this->columninfo_size();
  for (int i = 0; i < this->columninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columninfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TB_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TB_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TB_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TB_INFO::MergeFrom(const TB_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  columninfo_.MergeFrom(from.columninfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tbname()) {
      set_tbname(from.tbname());
    }
    if (from.has_rownum()) {
      set_rownum(from.rownum());
    }
    if (from.has_tbsize()) {
      set_tbsize(from.tbsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TB_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TB_INFO::CopyFrom(const TB_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TB_INFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  for (int i = 0; i < columninfo_size(); i++) {
    if (!this->columninfo(i).IsInitialized()) return false;
  }
  return true;
}

void TB_INFO::Swap(TB_INFO* other) {
  if (other != this) {
    std::swap(tbname_, other->tbname_);
    columninfo_.Swap(&other->columninfo_);
    std::swap(rownum_, other->rownum_);
    std::swap(tbsize_, other->tbsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TB_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TB_INFO_descriptor_;
  metadata.reflection = TB_INFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DATABASE_INFO::kDbNameFieldNumber;
const int DATABASE_INFO::kDbidFieldNumber;
const int DATABASE_INFO::kTbInfoFieldNumber;
#endif  // !_MSC_VER

DATABASE_INFO::DATABASE_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DATABASE_INFO::InitAsDefaultInstance() {
}

DATABASE_INFO::DATABASE_INFO(const DATABASE_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DATABASE_INFO::SharedCtor() {
  _cached_size_ = 0;
  dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DATABASE_INFO::~DATABASE_INFO() {
  SharedDtor();
}

void DATABASE_INFO::SharedDtor() {
  if (dbname_ != &::google::protobuf::internal::kEmptyString) {
    delete dbname_;
  }
  if (this != default_instance_) {
  }
}

void DATABASE_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DATABASE_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DATABASE_INFO_descriptor_;
}

const DATABASE_INFO& DATABASE_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();  return *default_instance_;
}

DATABASE_INFO* DATABASE_INFO::default_instance_ = NULL;

DATABASE_INFO* DATABASE_INFO::New() const {
  return new DATABASE_INFO;
}

void DATABASE_INFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dbname()) {
      if (dbname_ != &::google::protobuf::internal::kEmptyString) {
        dbname_->clear();
      }
    }
    dbid_ = 0;
  }
  tbinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DATABASE_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dbName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbname().data(), this->dbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dbid;
        break;
      }
      
      // required int32 dbid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dbid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dbid_)));
          set_has_dbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tbInfo;
        break;
      }
      
      // repeated .TB_INFO tbInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tbInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tbinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tbInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DATABASE_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string dbName = 1;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dbname(), output);
  }
  
  // required int32 dbid = 2;
  if (has_dbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dbid(), output);
  }
  
  // repeated .TB_INFO tbInfo = 3;
  for (int i = 0; i < this->tbinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tbinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DATABASE_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string dbName = 1;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dbname(), target);
  }
  
  // required int32 dbid = 2;
  if (has_dbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dbid(), target);
  }
  
  // repeated .TB_INFO tbInfo = 3;
  for (int i = 0; i < this->tbinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tbinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DATABASE_INFO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dbName = 1;
    if (has_dbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbname());
    }
    
    // required int32 dbid = 2;
    if (has_dbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dbid());
    }
    
  }
  // repeated .TB_INFO tbInfo = 3;
  total_size += 1 * this->tbinfo_size();
  for (int i = 0; i < this->tbinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tbinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DATABASE_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DATABASE_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DATABASE_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DATABASE_INFO::MergeFrom(const DATABASE_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  tbinfo_.MergeFrom(from.tbinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dbname()) {
      set_dbname(from.dbname());
    }
    if (from.has_dbid()) {
      set_dbid(from.dbid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DATABASE_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DATABASE_INFO::CopyFrom(const DATABASE_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DATABASE_INFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < tbinfo_size(); i++) {
    if (!this->tbinfo(i).IsInitialized()) return false;
  }
  return true;
}

void DATABASE_INFO::Swap(DATABASE_INFO* other) {
  if (other != this) {
    std::swap(dbname_, other->dbname_);
    std::swap(dbid_, other->dbid_);
    tbinfo_.Swap(&other->tbinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DATABASE_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DATABASE_INFO_descriptor_;
  metadata.reflection = DATABASE_INFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TASK_INFO::kTaskTypeFieldNumber;
const int TASK_INFO::kScheduleFieldNumber;
#endif  // !_MSC_VER

TASK_INFO::TASK_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TASK_INFO::InitAsDefaultInstance() {
}

TASK_INFO::TASK_INFO(const TASK_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TASK_INFO::SharedCtor() {
  _cached_size_ = 0;
  tasktype_ = 0u;
  schedule_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TASK_INFO::~TASK_INFO() {
  SharedDtor();
}

void TASK_INFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TASK_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TASK_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TASK_INFO_descriptor_;
}

const TASK_INFO& TASK_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();  return *default_instance_;
}

TASK_INFO* TASK_INFO::default_instance_ = NULL;

TASK_INFO* TASK_INFO::New() const {
  return new TASK_INFO;
}

void TASK_INFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tasktype_ = 0u;
    schedule_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TASK_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 taskType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_schedule;
        break;
      }
      
      // required uint32 schedule = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_schedule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schedule_)));
          set_has_schedule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TASK_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 taskType = 1;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tasktype(), output);
  }
  
  // required uint32 schedule = 2;
  if (has_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->schedule(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TASK_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 taskType = 1;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tasktype(), target);
  }
  
  // required uint32 schedule = 2;
  if (has_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->schedule(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TASK_INFO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 taskType = 1;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tasktype());
    }
    
    // required uint32 schedule = 2;
    if (has_schedule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schedule());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TASK_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TASK_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TASK_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TASK_INFO::MergeFrom(const TASK_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_schedule()) {
      set_schedule(from.schedule());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TASK_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TASK_INFO::CopyFrom(const TASK_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TASK_INFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TASK_INFO::Swap(TASK_INFO* other) {
  if (other != this) {
    std::swap(tasktype_, other->tasktype_);
    std::swap(schedule_, other->schedule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TASK_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TASK_INFO_descriptor_;
  metadata.reflection = TASK_INFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GROUP_DB_INFO::kGroupNameFieldNumber;
const int GROUP_DB_INFO::kDbidFieldNumber;
#endif  // !_MSC_VER

GROUP_DB_INFO::GROUP_DB_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GROUP_DB_INFO::InitAsDefaultInstance() {
}

GROUP_DB_INFO::GROUP_DB_INFO(const GROUP_DB_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GROUP_DB_INFO::SharedCtor() {
  _cached_size_ = 0;
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GROUP_DB_INFO::~GROUP_DB_INFO() {
  SharedDtor();
}

void GROUP_DB_INFO::SharedDtor() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (this != default_instance_) {
  }
}

void GROUP_DB_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GROUP_DB_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GROUP_DB_INFO_descriptor_;
}

const GROUP_DB_INFO& GROUP_DB_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();  return *default_instance_;
}

GROUP_DB_INFO* GROUP_DB_INFO::default_instance_ = NULL;

GROUP_DB_INFO* GROUP_DB_INFO::New() const {
  return new GROUP_DB_INFO;
}

void GROUP_DB_INFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
  }
  dbid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GROUP_DB_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string groupName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dbid;
        break;
      }
      
      // repeated uint32 dbid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dbid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_dbid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dbid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dbid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GROUP_DB_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string groupName = 1;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->groupname(), output);
  }
  
  // repeated uint32 dbid = 2;
  for (int i = 0; i < this->dbid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->dbid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GROUP_DB_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string groupName = 1;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupname(), target);
  }
  
  // repeated uint32 dbid = 2;
  for (int i = 0; i < this->dbid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->dbid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GROUP_DB_INFO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string groupName = 1;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }
    
  }
  // repeated uint32 dbid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->dbid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dbid(i));
    }
    total_size += 1 * this->dbid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GROUP_DB_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GROUP_DB_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GROUP_DB_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GROUP_DB_INFO::MergeFrom(const GROUP_DB_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  dbid_.MergeFrom(from.dbid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GROUP_DB_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GROUP_DB_INFO::CopyFrom(const GROUP_DB_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GROUP_DB_INFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GROUP_DB_INFO::Swap(GROUP_DB_INFO* other) {
  if (other != this) {
    std::swap(groupname_, other->groupname_);
    dbid_.Swap(&other->dbid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GROUP_DB_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GROUP_DB_INFO_descriptor_;
  metadata.reflection = GROUP_DB_INFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ROWKEY_ENTRY::kRowKeyFieldNumber;
const int ROWKEY_ENTRY::kEntryFieldNumber;
#endif  // !_MSC_VER

ROWKEY_ENTRY::ROWKEY_ENTRY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ROWKEY_ENTRY::InitAsDefaultInstance() {
}

ROWKEY_ENTRY::ROWKEY_ENTRY(const ROWKEY_ENTRY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ROWKEY_ENTRY::SharedCtor() {
  _cached_size_ = 0;
  rowkey_ = GOOGLE_ULONGLONG(0);
  entry_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ROWKEY_ENTRY::~ROWKEY_ENTRY() {
  SharedDtor();
}

void ROWKEY_ENTRY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ROWKEY_ENTRY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROWKEY_ENTRY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROWKEY_ENTRY_descriptor_;
}

const ROWKEY_ENTRY& ROWKEY_ENTRY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();  return *default_instance_;
}

ROWKEY_ENTRY* ROWKEY_ENTRY::default_instance_ = NULL;

ROWKEY_ENTRY* ROWKEY_ENTRY::New() const {
  return new ROWKEY_ENTRY;
}

void ROWKEY_ENTRY::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rowkey_ = GOOGLE_ULONGLONG(0);
    entry_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ROWKEY_ENTRY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 rowKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rowkey_)));
          set_has_rowkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_entry;
        break;
      }
      
      // required uint64 entry = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entry_)));
          set_has_entry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ROWKEY_ENTRY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 rowKey = 1;
  if (has_rowkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->rowkey(), output);
  }
  
  // required uint64 entry = 2;
  if (has_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->entry(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ROWKEY_ENTRY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 rowKey = 1;
  if (has_rowkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->rowkey(), target);
  }
  
  // required uint64 entry = 2;
  if (has_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->entry(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ROWKEY_ENTRY::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 rowKey = 1;
    if (has_rowkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rowkey());
    }
    
    // required uint64 entry = 2;
    if (has_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entry());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROWKEY_ENTRY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ROWKEY_ENTRY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ROWKEY_ENTRY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ROWKEY_ENTRY::MergeFrom(const ROWKEY_ENTRY& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rowkey()) {
      set_rowkey(from.rowkey());
    }
    if (from.has_entry()) {
      set_entry(from.entry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ROWKEY_ENTRY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROWKEY_ENTRY::CopyFrom(const ROWKEY_ENTRY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROWKEY_ENTRY::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void ROWKEY_ENTRY::Swap(ROWKEY_ENTRY* other) {
  if (other != this) {
    std::swap(rowkey_, other->rowkey_);
    std::swap(entry_, other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ROWKEY_ENTRY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ROWKEY_ENTRY_descriptor_;
  metadata.reflection = ROWKEY_ENTRY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DICT_VALUE::kStrValueFieldNumber;
const int DICT_VALUE::kIValueFieldNumber;
const int DICT_VALUE::kDValueFieldNumber;
#endif  // !_MSC_VER

DICT_VALUE::DICT_VALUE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DICT_VALUE::InitAsDefaultInstance() {
}

DICT_VALUE::DICT_VALUE(const DICT_VALUE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DICT_VALUE::SharedCtor() {
  _cached_size_ = 0;
  strvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ivalue_ = 0;
  dvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DICT_VALUE::~DICT_VALUE() {
  SharedDtor();
}

void DICT_VALUE::SharedDtor() {
  if (strvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete strvalue_;
  }
  if (this != default_instance_) {
  }
}

void DICT_VALUE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DICT_VALUE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DICT_VALUE_descriptor_;
}

const DICT_VALUE& DICT_VALUE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();  return *default_instance_;
}

DICT_VALUE* DICT_VALUE::default_instance_ = NULL;

DICT_VALUE* DICT_VALUE::New() const {
  return new DICT_VALUE;
}

void DICT_VALUE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strvalue()) {
      if (strvalue_ != &::google::protobuf::internal::kEmptyString) {
        strvalue_->clear();
      }
    }
    ivalue_ = 0;
    dvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DICT_VALUE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strvalue().data(), this->strvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iValue;
        break;
      }
      
      // optional int32 iValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivalue_)));
          set_has_ivalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_dValue;
        break;
      }
      
      // optional double dValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dvalue_)));
          set_has_dvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DICT_VALUE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string strValue = 1;
  if (has_strvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strvalue().data(), this->strvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strvalue(), output);
  }
  
  // optional int32 iValue = 2;
  if (has_ivalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ivalue(), output);
  }
  
  // optional double dValue = 3;
  if (has_dvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DICT_VALUE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string strValue = 1;
  if (has_strvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strvalue().data(), this->strvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strvalue(), target);
  }
  
  // optional int32 iValue = 2;
  if (has_ivalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ivalue(), target);
  }
  
  // optional double dValue = 3;
  if (has_dvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DICT_VALUE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strValue = 1;
    if (has_strvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strvalue());
    }
    
    // optional int32 iValue = 2;
    if (has_ivalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivalue());
    }
    
    // optional double dValue = 3;
    if (has_dvalue()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DICT_VALUE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DICT_VALUE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DICT_VALUE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DICT_VALUE::MergeFrom(const DICT_VALUE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strvalue()) {
      set_strvalue(from.strvalue());
    }
    if (from.has_ivalue()) {
      set_ivalue(from.ivalue());
    }
    if (from.has_dvalue()) {
      set_dvalue(from.dvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DICT_VALUE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DICT_VALUE::CopyFrom(const DICT_VALUE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DICT_VALUE::IsInitialized() const {
  
  return true;
}

void DICT_VALUE::Swap(DICT_VALUE* other) {
  if (other != this) {
    std::swap(strvalue_, other->strvalue_);
    std::swap(ivalue_, other->ivalue_);
    std::swap(dvalue_, other->dvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DICT_VALUE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DICT_VALUE_descriptor_;
  metadata.reflection = DICT_VALUE_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
